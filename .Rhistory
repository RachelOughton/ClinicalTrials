world = map_data("world")
names(world)
?aes
ggplot(data=world, aes(x=long, y=lat, group = group)) + geom_path()
max(world$group)
?plot
plot(lat~long, data = world[world$group==1,])
plot(lat~long, data = world[world$group==1,], type = "l")
plot(lat~long, data = world[world$group==1,], type = "l", xlim=c(-180,180))
summary(world)
plot(lat~long, data = world[world$group==1,],
type = "l", xlim=c(-180,191), ylim = c(-86, 84))
?lines
for (i in 2:1627){
lines(world$long[world$group==i], world$lat[world$group=2])
for (i in 2:1627){
lines(world$long[world$group==i], world$lat[world$group==i])
}
ggworldplot = ggplot(data=world, aes(x=long, y=lat, group = group)) +
geom_path() +
theme_bw() +
xlab("Longitude") +
ylab("Latitude")
ggworldplot
storm_df = data.frame(
long = rnorm(100, mean=-50, sd=10),
lat = rnorm(100, mean=0, sd=30),
pressure = rnorm(100, mean=10, sd=10)
)
ggworldplot +
geom_point(aes(x=long, y=lat, fill=pressure), alpha=0.5)+
scale_fill_continuous(type = "viridis")
storm_df
ggworldplot +
geom_point(data = storm_df, aes(x=long, y=lat, fill=pressure), alpha=0.5)+
scale_fill_continuous(type = "viridis")
ggworldplot = ggplot(data=world, aes(x=long, y=lat)) +
geom_path(aes(group = group)) +
theme_bw() + # this gets rid of the grey background
xlab("Longitude") +
ylab("Latitude")
ggworldplot
storm_df = data.frame(
long = rnorm(100, mean=-50, sd=10),
lat = rnorm(100, mean=0, sd=30),
pressure = rnorm(100, mean=10, sd=10)
)
ggworldplot +
geom_point(data = storm_df, aes(x=long, y=lat, fill=pressure), alpha=0.5)+
scale_fill_continuous(type = "viridis")
ggworldplot +
geom_point(data = storm_df, aes(x=long, y=lat, col=pressure), alpha=0.5)+
scale_color_continuous(type = "viridis")
storm_df = data.frame(
long = rnorm(100, mean=-50, sd=50),
lat = rnorm(100, mean=0, sd=10),
pressure = rnorm(100, mean=10, sd=10)
)
ggworldplot +
geom_point(data = storm_df, aes(x=long, y=lat, col=pressure), alpha=0.5)+
scale_color_continuous(type = "viridis")
storm_df = data.frame(
long = rnorm(100, mean=-50, sd=5),
lat = rnorm(100, mean=0, sd=10),
pressure = rnorm(100, mean=10, sd=10)
)
ggworldplot +
geom_point(data = storm_df, aes(x=long, y=lat, col=pressure), alpha=0.5)+
scale_color_continuous(type = "viridis")
storm_df = data.frame(
long = rnorm(100, mean=-50, sd=5),
lat = rnorm(100, mean=0, sd=10),
pressure = rnorm(100, mean=100, sd=10)
)
ggworldplot +
geom_point(data = storm_df, aes(x=long, y=lat, col=pressure),
alpha=0.5) +
scale_color_continuous(type = "viridis")
ggworldplot + # add this on to the world map
geom_point(data = storm_df, aes(x=long, y=lat, col=pressure),
alpha=0.3) +
scale_color_continuous(type = "viridis")
ggworldplot + # add this on to the world map
geom_point(data = storm_df, aes(x=long, y=lat, col=pressure),
alpha=0.4) +
scale_color_continuous(type = "viridis")
library(mvnorm)
library(MASS)
?mnrnorm
?mvrnorm
set.seed(60007)
x_cor = diag(4)
for (i in 1:3){
for (j in 2:4){
random_corr = runif(1, min=0, max=1)
x_cor[i,j] = random_corr
x_cor[j,i] = random_corr
}
}
x_mat = mvrnorm(n=20, mu=)
x_cor
is.pd(x_cor)
is.positive.definite(x_cor)
library(matrixcalc)
require(matrixcalc)
install.packages("matrixcalc")
require(matrixcalc)
is.positive.definite(x_cor)
n <- 4
A <- matrix(runif(n^2)*2-1, ncol=n)
Sigma <- t(A) %*% A
is.positive.definite(Sigma)
Sigma
set.seed(60007)
n <- 4
A <- matrix(runif(n^2)*2-1, ncol=n)
Sigma <- t(A) %*% A
Sigma
x_mat = mvrnorm(n=20, mu=1, Sigma=Sigma)
x_mat = mvrnorm(n=20, mu=c(1,2,3,4), Sigma=Sigma)
set.seed(60007)
n <- 4
A <- matrix(runif(n^2)*2-1, ncol=n)
Sigma <- t(A) %*% A
x_mat = mvrnorm(n=20, mu=1:4, Sigma=Sigma)
x_mat
names(x_df) = sprintf("x%g", 1:4)
x_df = as.data.frame(x_mat)
names(x_df) = sprintf("x%g", 1:4)
x_df
# Create a dependent variable y, made by a linear combination of x variables
# y is deliberately not dependent on x3
attach(x_df)
x_df$y = 3*x1 + 2*x2 - x4
x_df
lm_x = lm(y~x1+x2+x3+x4, data=x_df)
summary(lm_x)
# Create a dependent variable y, made by a linear combination of x variables
# y is deliberately not dependent on x3
attach(x_df)
x_df$y = 3*x1 + 2*x2 - x4 + rnorm(n=20, mean=0, sd=0.1)
lm_x = lm(y~x1+x2+x3+x4, data=x_df)
summary(lm_x)
set.seed(60007)
n <- 15
A <- matrix(runif(n^2)*2-1, ncol=n)
Sigma <- t(A) %*% A
# Generate a matrix 40 draws from this distribution
x_mat = mvrnorm(n=20, mu=1:n, Sigma=Sigma)
# Turn it into a data frame and name the columns x1 to x<n>
x_df = as.data.frame(x_mat)
names(x_df) = sprintf("x%g", 1:n)
# Create a dependent variable y, made by a linear combination of x variables
# y is deliberately not dependent on x3
attach(x_df)
Sigma
set.seed(60007)
n <- 15
A <- matrix(runif(n^2)*2-1, ncol=n)
Sigma <- t(A) %*% A
# Generate a matrix 40 draws from this distribution
x_mat = mvrnorm(n=20, mu=rep(1,n), Sigma=Sigma)
# Turn it into a data frame and name the columns x1 to x<n>
x_df = as.data.frame(x_mat)
names(x_df) = sprintf("x%g", 1:n)
# Create a dependent variable y, made by a linear combination of x variables
# y is deliberately not dependent on x3
attach(x_df)
# y is just the sum of all the x variables, plus some random error
x_df$y = rowSums(x_df) + rnorm(n=20, mean=0, sd=0.1)
?lm
cat(sprintf("x%g+", 1:15))
lm_x = lm(y~x1+ x2+ x3+ x4+ x5+ x6+ x7+ x8+ x9+ x10+ x11+ x12+ x13+ x14+ x15, data=x_df)
summary(lm_x)
Sigma[3,]
?princomp
pc_x = princomp(x_df[,(n+1)])
pc_x
pc_x = princomp(x_df[,-(n+1)])
pc_x
set.seed(60005)
n <- 15
A <- matrix(runif(n^2)*2-1, ncol=n)
Sigma <- t(A) %*% A
Sigma
# Generate a matrix 40 draws from this distribution
x_mat = mvrnorm(n=20, mu=rep(1,n), Sigma=Sigma)
# Turn it into a data frame and name the columns x1 to x<n>
x_df = as.data.frame(x_mat)
names(x_df) = sprintf("x%g", 1:n)
# Create a dependent variable y, made by a linear combination of x variables
attach(x_df)
# y is just the sum of all the x variables, plus some random error
x_df$y = rowSums(x_df) + rnorm(n=20, mean=0, sd=0.1)
lm_x = lm(y~x1+ x2+ x3+ x4+ x5+ x6+ x7+ x8+ x9+ x10+ x11+ x12+ x13+ x14+ x15, data=x_df)
summary(lm_x)
set.seed(6005)
n <- 15
A <- matrix(runif(n^2)*2-1, ncol=n)
Sigma <- t(A) %*% A
# Generate a matrix 40 draws from this distribution
x_mat = mvrnorm(n=20, mu=rep(1,n), Sigma=Sigma)
# Turn it into a data frame and name the columns x1 to x<n>
x_df = as.data.frame(x_mat)
names(x_df) = sprintf("x%g", 1:n)
# Create a dependent variable y, made by a linear combination of x variables
attach(x_df)
# y is just the sum of all the x variables, plus some random error
x_df$y = rowSums(x_df) + rnorm(n=20, mean=0, sd=0.1)
lm_x = lm(y~x1+ x2+ x3+ x4+ x5+ x6+ x7+ x8+ x9+ x10+ x11+ x12+ x13+ x14+ x15, data=x_df)
summary(lm_x)
Sigma
pc_x = princomp(x_df[,-(n+1)])
summary(pc_x)
screeplot(pc_x)
loadings(pc_x)
load_pcx = loadings(pc_x)
class(load_pcx)
names(load_pcx)
load_pcx%*%x_df[,-16]
attr(load_pcx, "Loadings")
?loadings
pc_x$loadings
load_pcx = pc_x$loadings
class(load_pcx)
biplot(pc_x)
as.matrix(load_pcx)
as.matrix(load_pcx)%*%x_mat
dim(as.matrix(load_pcx))
dim(x_mat)
t(x_mat)%*%as.matrix(load_pcx)
dim(t(x_mat))
dim(x_mat)
pc_x_data = x_mat%*%as.matrix(load_pcx)
cor(pc_x_data)
names(pc_x_data)
class(pc_x_data)
pc_x_df = as.data.frame(pc_x_mat)
pc_x_mat = x_mat%*%as.matrix(load_pcx)
# You can see that now the correlations are [almost] zero
# This therefore solves our problem of multicollinearity
cor(pc_x_mat)
pc_x_df = as.data.frame(pc_x_mat)
names(pc_x_df) = sprintf("pc%g", 1:15)
pc_x_df
pc_x
summary(pc_x)
pc_x_df$y = x_df$y
cat(sprintf("pc%g +", 1:9))
pc_lm = lm(y ~ pc1 + pc2 + pc3 + pc4 + pc5 + pc6 + pc7 + pc8 + pc9, data = pc_x_df)
summary(pc_lm)
cat(sprintf("pc%g +", 1:15))
pc_lm_full = lm(y~pc1 + pc2 + pc3 + pc4 + pc5 + pc6 + pc7 + pc8 + pc9 + pc10 + pc11 + pc12 + pc13 + pc14 + pc15, data=pc_x_df)
summary(pc_lm_full)
summary(pc_x)
pc_lm_red = lm(y~pc1 + pc2 + pc3 + pc4 + pc5 + pc6 + pc7 + pc8 + pc9 + pc10 + pc11 + pc12, data=pc_x_df)
summary(pc_lm_red)
summary(lm_x)
pc_x$loadings
getwd()
setwd("OneDrive - Durham University/EEF Early Years Conversation Project/Randomisation/")
load("EYCP_alloc42.Rdata")
summary(eycp_alloc42)
names(eycp_alloc42)
new_138 = eycp_alloc42[,-c(11,12)]
new_138$NumRec[new_138$ID==138] = 6
new_138$NR_bin[new_138$ID==138] = 1
updated_138 = eycp_df_update(
df_alloc = eycp_alloc42,
df_new = new_138
)
eycp_df_update = function(
df_alloc,  # old/existing df including already allocated
df_new # df with new data. same ID as df_alloc
){
id_old = df_alloc$ID
id_new = df_new$ID
n_new = nrow(df_new)
id_lost = setdiff(id_old, id_new)
if(length(id_lost)>0){
message(sprintf("ID %g is being removed\n", id_lost))
}
df_new_temp = df_new
alloc_col = names(df_alloc)[grep("alloc", tolower(names(df_alloc)))]
alloc_vec = rep(NA, n_new)
for (i in 1:n_new){
av_tmp = df_alloc[[alloc_col]][df_alloc$ID == df_new$ID[i]]
av_tmp = ifelse(length(av_tmp)==0, NA, av_tmp)
alloc_vec[i] = av_tmp
}
df_new_temp$Alloc = alloc_vec
df_update = df_new_temp
df_update$status = rep(NA, n_new)
df_update$status[!is.na(df_new_temp$Alloc)] = "done"
df_update$status[(is.na(df_new_temp$Alloc))&(!is.na(df_new_temp$NR_bin))] = "ready"
df_update$status[(is.na(df_new_temp$Alloc))&(is.na(df_new_temp$NR_bin))] = "notyet"
return(df_update)
}
update_alloc = function(
df_update,  # an updated df list, as above.
cols, # indices of columns to use in allocation
p_high = 1,
seed = 1234
){
df_ready = df_update[df_update$status == "ready",]
df_done = df_update[df_update$status == "done",]
n_ready = nrow(df_ready)
n_done = nrow(df_done)
covwt = rep(1/3, 3)
ratio = c(1,1)
df_alloc = rbind(df_done, df_ready)
res = df_alloc$Alloc
# remove ID from df_ord for this
for (j in 1:n_ready){
res_tmp <- Minirand(
covmat=df_alloc[,cols], j+n_done, covwt=covwt, ratio=ratio,
ntrt=2, trtseq=c(1,2), method="Range", result=res, p = p_high
)
res[j+n_done] = res_tmp
}
rand_summary = data.frame(ID = df_ready$ID, Arm = res[-(1:n_done)])
for (i in 1:n_ready){
df_update$Alloc[df_update$ID == rand_summary$ID[i]] = rand_summary$Arm[i]
}
return(
list(
new_rand = rand_summary,
df_update = df_update
)
)
}
updated_138 = eycp_df_update(
df_alloc = eycp_alloc42,
df_new = new_138
)
updated_138
names(updated_138)
alloc_43 = update_alloc(df_update = updated_138, cols = c(2,9,10))
library(Minirand)
alloc_43 = update_alloc(df_update = updated_138, cols = c(2,9,10))
alloc_43
alloc_43[ ,c(1,2,9,10)]
dim(alloc_43)
class(alloc_43)
names(alloc_43)
alloc_43$new_rand
alloc_43$df_update
eycp_alloc43 = alloc_43$df_update
save(eycp_alloc43, file= "EYCP_alloc43.Rdata")
write.csv(eycp_alloc43, file= "EYCP_allocation_final43.csv")
new_106 = eycp_alloc43[,-c(11,12)]
new_106$NumRec[new_106$ID==106] = 7
new_106$NR_bin[new_106$ID==106] = 1
new_106
updated_106 = eycp_df_update(
df_alloc = eycp_alloc43,
df_new = new_106
)
updated_106
alloc_44 = update_alloc(df_update = updated_106, cols = c(2,9,10))
alloc_44[ ,c(1,2,9,10)]
dim(alloc_44)
alloc_44$df_update[ ,c(1,2,9,10)]
alloc_44$new_rand
alloc_44$df_update[ ,c(1,2,9,10,11)]
eycp_alloc44 = alloc_44$df_update
save(eycp_alloc44, file= "EYCP_alloc44.Rdata")
write.csv(eycp_alloc44, file= "EYCP_allocation_final44.csv")
alloc_44$new_rand
99/2000
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
load("acupuncture_data_reduced.RData")
acu_df = load("acupuncture_data_reduced.RData")
summary(acu_df)
dim(acu_df)
load("acupuncture_data_reduced.RData")
acu_df = data
summary(acu_df)
acu_df$sex = as.factor(acu_df$sex)
acu_df$migraine = as.factor(acu_df$migraine)
class(acu_df$acupuncturist) = "factor"
acu_df$acupuncturist = as.factor(acu_df$acupuncturist)
acu_df$acupuncturist
load("acupuncture_data_reduced.RData")
acu_df = data
acu_df$sex = as.factor(acu_df$sex)
acu_df$migraine = as.factor(acu_df$migraine)
acu_df$acupuncturist = as.factor(acu_df$acupuncturist)
summary(acu_df)
acu_df$practice_id = as.factor(acu_df$practice_id)
acu_df$group = as.factor(acu_df$group)
summary(acu_df)
lm_acu = lm(pk5 ~ age + sex+ migraine + chronicity + pk1 + group, data = acu_df )
summary(lm_acu)
summary(lm_acu)
anova(lm_acu)
sqrt(114)
lm_acu = lm(pk5 ~ I(age + sex+ migraine + chronicity + pk1 + group)^2, data = acu_df )
lm_acu = lm(pk5 ~ (age + sex+ migraine + chronicity + pk1 + group)*(age + sex+ migraine + chronicity + pk1 + group), data = acu_df )
summary(lm_acu)
anova(lm_acu)
acu_df$score_baseline = acu_df$pk1
acu_df$score_1year = acu_df$pk5
save(acu_df, file = "acu_df.Rdata")
lm_acu_lin = lm(score_1year ~ age + sex+ migraine + chronicity + score_baseline + group, data = acu_df )
lm_acu_int = lm(score_1year ~ (age + sex+ migraine + chronicity + score_baseline + group)*(age + sex+ migraine + chronicity + score_baseline + group), data = acu_df )
summary(lm_acu_lin)
summary(lm_acu_int)
lm_acu_intrest = lm(score_1year ~ age + sex+ migraine + chronicity + score_baseline + group + score_baseline*group, data = acu_df )
summary(lm_acu_intrest)
lm_acu_lin = lm(score_1year ~ age + sex+ migraine + chronicity + score_baseline + group, data = acu_df )
summary(lm_acu_lin)
ggplot(data=acu_df, aes(x=score_baseline, y=score_1year, col=group)) + geom_point()
ggplot(data=acu_df, aes(x=score_baseline, y=score_1year, col=group)) + geom_point()+
geom_abline(intercept=0.4394, slope = 0.7077, col = "red")
ggplot(data=acu_df, aes(x=score_baseline, y=score_1year, col=group)) + geom_point()+
)
ggplot(data=acu_df, aes(x=score_baseline, y=score_1year, col=group)) + geom_point()+
geom_abline(intercept=0.4394, slope = 0.7077, col = "red")
ggplot(data=acu_df, aes(x=score_baseline, y=score_1year, col=group)) + geom_point()
dev.off()
ggplot(data=acu_df, aes(x=score_baseline, y=score_1year, col=group)) + geom_point()
ggplot(data=acu_df, aes(x=score_baseline, y=score_1year, col=group)) + geom_point()+
geom_abline(intercept=0.4394, slope = 0.7077, col = "red")
?geom_abline
dev.off()
ggplot(data=acu_df, aes(x=score_baseline, y=score_1year, col=group)) + geom_point()+
geom_abline(data=NULL, intercept=0.4394, slope = 0.7077, col = "red")
dev.off()
ggplot(data=acu_df, aes(x=score_baseline, y=score_1year, col=group)) + geom_point()+
geom_abline(data=NULL, slope = 0.7077, intercept=0.4394)
ggplot(data=acu_df, aes(x=score_baseline, y=score_1year, col=group)) + geom_point()+
geom_abline(data=NULL, slope = 0.7077, intercept=0.4394, colour = "red")
names(acu_df)
ggplot(data=acu_df, aes(x=score_baseline, y=score_1year, col=group)) + geom_point()
dev.off()
ggplot(data=acu_df, aes(x=score_baseline, y=score_1year, col=group)) + geom_point()
ggplot(data=acu_df, aes(x=score_baseline, y=score_1year, col=group)) +
geom_point() +
geom_abline(slope = 0.7077, intercept=0.4394, colour = "red")
coef(lm_acu_lin)
ggplot(data=acu_df, aes(x=score_baseline, y=score_1year, col=group)) +
geom_point() +
geom_abline(
slope = coef(lm_acu_lin)[["score_baseline"]],
intercept = coef(lm_acu_lin)[["(Intercept)"]],
colour = "red") +
geom_abline(
slope = coef(lm_acu_lin)[["score_baseline"]],
intercept = coef(lm_acu_lin)[["(Intercept)"]] + coef(lm_acu_lin)[["group1"]],
colour = "darkturquoise")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
lm_acu_age = lm(score_1year ~ age score_baseline + group, data = acu_df )
lm_acu_age = lm(score_1year ~ age + score_baseline + group, data = acu_df )
summary(lm_acu_age)
fitted(lm_acu_age)
fitted_age = fitted(lm_acu_age)
class(fitted(lm_acu_age))
plot(fitted_age)
plot(fitted_age~acu_df$age)
length(fitted_age)
dim(acu_df)
summary(acu_df)
acu_df$fit_age = rep(NA, nrow(acu_df))
acu_df$fit_age[!is.na(acu_df$score_1year)] = fitted_age
ggplot(data = acu_df[!is.na(acu_df$score_1year), ], aes(x=score_baseline, y=score_1year, col=group)) + geom_point()
geom_point()
?geom_point
ggplot(data = acu_df[!is.na(acu_df$score_1year), ], aes(x=score_baseline, y=score_1year, col=group)) + geom_point() +
geom_point(aes(y=fit_age), shape = 2)
ggplot(data = acu_df[!is.na(acu_df$score_1year), ], aes(x=score_baseline, y=score_1year, col=group)) + geom_point(alpha=0.5) +
geom_point(aes(y=fit_age), shape = 2)
ggplot(data = acu_df[!is.na(acu_df$score_1year), ], aes(x=score_baseline, y=score_1year, col=group)) + geom_point(alpha=0.75) +
geom_point(aes(y=fit_age), shape = 2)
ggplot(data = acu_df[!is.na(acu_df$score_1year), ], aes(x=score_baseline, y=score_1year, col=group)) + geom_point(alpha=0.05) +
geom_point(aes(y=fit_age), shape = 2)
ggplot(data = acu_df[!is.na(acu_df$score_1year), ], aes(x=score_baseline, y=score_1year, col=group)) + geom_point(alpha=0.25) +
geom_point(aes(y=fit_age))
ggplot(data = acu_df[!is.na(acu_df$score_1year), ], aes(x=score_baseline, y=score_1year, col=group)) + geom_point(alpha=0.25) +
geom_point(aes(y=fit_age))+theme_bw()
lm_acu_ageint = lm(score_1year ~ (age + score_baseline + group)*(age + score_baseline + group), data = acu_df )
summary(lm_acu_ageint)
names(acu_df)
model_fit_df = data.frame(
id = acu_df$id,
score_baseline = acu_df$score_baseline,
score_1year = acu_df$score_1year
)
model_fit_df = model_fit_df[!is.na(model_fit_df$score_1year),]
model_fit_df = data.frame(
id = acu_df$id,
score_baseline = acu_df$score_baseline,
score_1year = acu_df$score_1year,
group = acu_df$group
)
model_fit_df = model_fit_df[!is.na(model_fit_df$score_1year),]
lm_acu_lin = lm(score_1year ~ age + sex+ migraine + chronicity + score_baseline + group, data = acu_df )
summary(lm_acu_lin)
model_fit_df$fit_lin = fitted(lm_acu_lin)
model_fit_df$resid_lin = resid(lm_acu_lin)
ggplot(data=model_fit_lin, aes(x=score_baseline, y=resid_lin, col=group)) +
geom_point() +
geom_hline(yintercept=0)
ggplot(data=model_fit_df, aes(x=score_baseline, y=resid_lin, col=group)) +
geom_point() +
geom_hline(yintercept=0)
lm_full_int = lm(score_1year ~ (age + sex+ migraine + chronicity + score_baseline + group)*(age + sex+ migraine + chronicity + score_baseline + group), data=acu_df)
summary(lm_full_int)
q()
