0.03014*(5/6)
0.13*60
0.0193 * 366000
data("iris")
str(iris)
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram()
library(ggplot2)
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram()
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram(position="dodge")
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram(position="dodge", bins=6)
install.packages("multigroup")
library(multigroup)
TBWvariance(iris, Species)
TBWvariance(iris, iris$Species)
?TBWvariance
iris
TBWvariance(iris[,1], iris$Species)
TBWvariance(iris["Sepal.Length"], iris$Species)
var(iris$Sepal.Length)
between.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
mean = mean(data)
ssqvec = sapply(1:ng, function(i){(means[i]-mean)^2})
ssqvec/(ng-1)
}
between.var(iris$Sepal.Length, iris$Species)
between.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
mean = mean(data)
ssqvec = sapply(1:ng, function(i){(means[i]-mean)^2})
sum(ssqvec)/(ng-1)
}
between.var(iris$Sepal.Length, iris$Species)
var(sepal.length)
var(iris$Sepal.Length
)
debug(between.var)
between.var(iris$Sepal.Length, iris$Species)
groups
ng
means
mean
ssqvec
ssqvec
0.84^2
sum(ssqvec)/3
between.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
mean = mean(data)
ssqvec = sapply(1:ng, function(i){njvec[i]*(means[i]-mean)^2})
sum(ssqvec)/(ntot-ng)
}
between.var(iris$Sepal.Length, iris$Species)
library(fivethirtyeight)
install.packages("fivethirtyeight")
library(fivethirtyeight)
data(bechdel)
?bechdel
data(mad_men)
?TBWvariance
TBWvariance
within.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
g_sums = rep(NA, ng)
for (j in 1:ng){
data_j = data[groupvec == groups[j]]
for (i in 1:njvec[j]){
ssqvec = (data_j[i] - means[j])^2
g_sums[j] = sum(ssqvec)/(njvec[i]-1)
}
}
sum(g_sums)
}
within.var(iris$Sepal.Length, iris$Species)
debug(within.var)
within.var(iris$Sepal.Length, iris$Species)
groups
ng
ntot
njvec
g_sums
within.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
g_sums = rep(NA, ng)
for (j in 1:ng){
data_j = data[groupvec == groups[j]]
ssqvec = rep(NA, njvec[j])
for (i in 1:njvec[j]){
ssqvec[i] = (data_j[i] - means[j])^2
}
g_sums[j] = sum(ssqvec)/(njvec[i]-1)
}
sum(g_sums)
}
between.var(iris$Sepal.Length, iris$Species)
within.var(iris$Sepal.Length, iris$Species)
debug(within.vRar)
debug(within.var)
within.var(iris$Sepal.Length, iris$Species)
njvec
data_j
ssqvec
g_sums
ssqvec
sum(ssqvec)
sum(ssqvec)/(njvec[i]-1)
sum(ssqvec)/(njvec[j]-1)
within.var
within.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
g_sums = rep(NA, ng)
for (j in 1:ng){
data_j = data[groupvec == groups[j]]
ssqvec = rep(NA, njvec[j])
for (i in 1:njvec[j]){
ssqvec[i] = (data_j[i] - means[j])^2
}
g_sums[j] = sum(ssqvec)/(njvec[j]-1)
}
sum(g_sums)
}
between.var(iris$Sepal.Length, iris$Species)
within.var(iris$Sepal.Length, iris$Species)
TBWvariance(iris["Sepal.Length"], iris$Species)
var(iris$Sepal.Length)
?Veteran
library(survival)
?veteran
knitr::opts_chunk$set(echo = TRUE)
km_va = survfit(Surv(time, status) ~ trt, data=veteran)
autoplot(km_va)
library(ggplot2)
?require
km_va = survfit(Surv(time, status) ~ trt, data=veteran)
autoplot(km_va)
summary(km_va)
?autoplot
km_va = survfit(Surv(time, status) ~ trt, data=veteran)
autoplot(km_va)
knitr::opts_chunk$set(echo=FALSE, message = FALSE, warning = FALSE)
htmltools::tagList(rmarkdown::html_dependency_font_awesome())
# This line sometimes needs commenting out to first generate the html file
options(knitr.table.format = function() {
if (knitr::is_latex_output())
"latex" else "pipe"
})
library(ggfortify)
autoplot(km_va)
autoplot(km_va, conf.int=F)
sr_va = survreg(Surv(time, status) ~ trt, dist='weibull', data=veteran)
autoplot(sr_va)
summary(sr_va)
str(vetera)
str(veteran)
summary(veteran$trt)
sr_va = survreg(Surv(time, status) ~ as.factor(trt), dist='weibull', data=veteran)
tpred_vaA = predict(sr_va, newdata=list(trt=1),type="quantile",p=seq(.01,.99,by=.01))
tpred_vaB = predict(sr_va, newdata=list(trt=1),type="quantile",p=seq(.01,.99,by=.01))
va_weib_df = data.frame(
time = c(tpred_vaA, tpred_vaB),
prob = c(seq(.01,.99,by=.01), seq(.01,.99,by=.01)),
trt = as.factor(c(rep(1, 99), rep(1, 99))))
plot(va_km_fit, xlab="Time", ylab = "S(t)", col=c(1,2))
plot(va_km, xlab="Time", ylab = "S(t)", col=c(1,2))
plot(km_va, xlab="Time", ylab = "S(t)", col=c(1,2))
lines(va_weib_df$time[va_weib_df$trt==1], 1-va_weib_df$prob[va_weib_df$trt==1], type="l", col=1, lty=2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggfortify)
library(survival)
autoplot(km_va, conf.int=F) + geom_line(data=va_weib_df, aes(x=time, y=1-prob, col=trt))
tpred_vaB = predict(sr_va, newdata=list(trt=2),type="quantile",p=seq(.01,.99,by=.01))
va_weib_df = data.frame(
time = c(tpred_vaA, tpred_vaB),
prob = c(seq(.01,.99,by=.01), seq(.01,.99,by=.01)),
trt = as.factor(c(rep(1, 99), rep(1, 99))))
autoplot(km_va, conf.int=F) + geom_line(data=va_weib_df, aes(x=time, y=1-prob, col=trt))
va_weib_df
tpred_vaA = predict(sr_va, newdata=list(trt=1),type="quantile",p=seq(.01,.99,by=.01))
tpred_vaB = predict(sr_va, newdata=list(trt=2),type="quantile",p=seq(.01,.99,by=.01))
va_weib_df = data.frame(
time = c(tpred_vaA, tpred_vaB),
prob = c(seq(.01,.99,by=.01), seq(.01,.99,by=.01)),
trt = as.factor(c(rep(1, 99), rep(2, 99))))
autoplot(km_va, conf.int=F) + geom_line(data=va_weib_df, aes(x=time, y=1-prob, col=trt))
coxph(formula = Surv(time, status)~as.factor(trt), data=veteran)
str(veteran)
?veteran
coxph(formula = Surv(time, status)~as.factor(trt) + celltype + age + diagtime + prior, data=veteran)
km_va2 = survfit(Surv(time, status) ~ as.factor(trt)+celltype, data=veteran)
autoplot(km_va2, conf.int=F)
km_va2 = survfit(Surv(time, status) ~ celltype, data=veteran)
autoplot(km_va2, conf.int=F)
q()
8^2
6^2 + 6^2
6^2 + 8^2
1-0.65^2
0.5775 * 155
## Function to simulate one trial (with ANCOVA analysis)
ancova_trial_srs = function(
N,       # Number of participants per group
mu_B,    # baseline mean
mu,      # outcome mean (control group / H_0)
rho,     # correlation between baseline and outcome
tm,      # minimum detectable effect size
sd_eps,  # SD of error
sd_B     # SD of baseline measurement
){
## Empty data frame for trial data
trial_mat = matrix(NA, ncol=3, nrow=2*N)
trial_df = data.frame(trial_mat)
names(trial_df) = c("baseline", "arm", "outcome")
for (i in 1:(2*N)){
bas_i = rnorm(1, mean=mu_B, sd=sd_B)
trial_df$baseline[i] = bas_i
alloc_i = sample(c("C", "T"), 1) # Using SRS in this function
trial_df$arm[i] = alloc_i
eps_i = rnorm(1, mean=0, sd=sd_eps)
if(alloc_i == "C"){
out_i = mu + rho*(bas_i - mu_B) + eps_i
} else if (alloc_i == "T"){
out_i = mu + tm + rho*(bas_i - mu_B) + eps_i
}
trial_df$outcome[i] = out_i
}
model.fit = lm(outcome ~ baseline + arm, data=trial_df)
summary(model.fit)
}
ancova_sim_srs = function(
nsim,  # the number of simulations to use
N,       # Number of participants per group
mu_B,    # baseline mean
mu,      # outcome mean (control group / H_0)
rho,     # correlation between baseline and outcome
tm,      # minimum detectable effect size
sd_eps,  # SD of error
sd_B     # SD of baseline measurement
){
H0_reject_vec = rep(NA, nsim) # to store 1 if H0 rejected, 0 if fail to reject H0
for (i in 1:nsim){
trial_i = ancova_trial_srs(N, mu_B, mu, rho, tm, sd_eps, sd_B)
H0_reject_vec[i] = ifelse(trial_i$coefficients[3,4]<0.05, 1, 0)
}
power.est = mean(H0_reject_vec)
power.est
}
sim_vec6 = rep(NA, 100)
for (i in 1:100){
sim_vec6[i] = ancova_sim_srs(nsim=100, N=90, mu_B=50, mu=60,
rho=0.65, tm=3, sd_eps=6, sd_B = 8)
}
ggplot(mapping = aes(sim_vec6)) + geom_histogram(bins=10)
library(ggplot2)
ggplot(mapping = aes(sim_vec6)) + geom_histogram(bins=10)
?colon
?bladder
median(colondf$nodes)
median(colon$nodes)
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
?mustine
eycp_df = read.csv(file = "/Users/rachelo/OneDrive - Durham University/AP2020_21/Projects/EEF_MPT/Randomisation/FourSettings RVM.xlsx", header=T)
eycp_df
eycp_df = read.csv(file = "/Users/rachelo/OneDrive - Durham University/AP2020_21/Projects/EEF_MPT/Randomisation/FourSettings RVM.csv", header=T)
eycp_df
eycp_df$ID = 1:nrow(eycp_df)
c("N", "S", "S", "W")
tabulate(c("N", "S", "S", "W"))
counts(c("N", "S", "S", "W"))
table(c("N", "S", "S", "W"))
tab1 = table(c("N", "S", "S", "W"))
max(tab1)
cat("S", 1:4)
names(sam_df) = c(sprintf("S%g", 1:4), "Max type", "Max_mentor", "Fit")
sam_mat = matrix(NA, nrow=1000, ncol = 7)
sam_df = as.data.frame(sam_mat)
names(sam_df) = c(sprintf("S%g", 1:4), "Max type", "Max_mentor", "Fit")
sam_df
namessam_Df
names(sam_df)
sample1 = function(){
sami = sample(eycp_df$ID, size=4, replace=F)
type_i = eycp_df$Type[sami]
mentor_i = eycp_df$Mentor[i]
tab_type = table(type_i)
tab_mentor = table(mentor_i)
if((max(tab_type)==2)&(max(tab_mentor==1))){
fit_i = T
} else {fit_i = F}
}
sample1()
eycp_df = read.csv(file = "/Users/rachelo/OneDrive - Durham University/AP2020_21/Projects/EEF_MPT/Randomisation/FourSettings RVM.csv", header=T)
eycp_df$ID = 1:nrow(eycp_df)
sample1 = function(){
sami = sample(eycp_df$ID, size=4, replace=F)
type_i = eycp_df$Type[sami]
mentor_i = eycp_df$Mentor[i]
tab_type = table(type_i)
tab_mentor = table(mentor_i)
if((max(tab_type)==2)&(max(tab_mentor==1))){
fit_i = T
} else {fit_i = F}
}
sample1()
names(sam_df)
sample1 = function(){
sami = sample(eycp_df$ID, size=4, replace=F)
type_i = eycp_df$Type[sami]
mentor_i = eycp_df$Mentor[i]
tab_type = table(type_i)
tab_mentor = table(mentor_i)
if((max(tab_type)==2)&(max(tab_mentor==1))){
fit_i = T
} else {fit_i = F}
return(c(sami), max(tab_type), max(tab_mentor), fit_i)
}
sample1()
debug(sample1)
sample1()
sami
type_i
mentor_i
names(eycp_df)
sample1 = function(){
sami = sample(eycp_df$ID, size=4, replace=F)
type_i = eycp_df$Type[sami]
mentor_i = eycp_df$Mentor[sami]
tab_type = table(type_i)
tab_mentor = table(mentor_i)
if((max(tab_type)==2)&(max(tab_mentor==1))){
fit_i = T
} else {fit_i = F}
return(c(sami), max(tab_type), max(tab_mentor), fit_i)
}
sample1()
debug(sample1)
sample1()
mentor_i
tab_mentor
max(tab_mentor)
sample1 = function(){
sami = sample(eycp_df$ID, size=4, replace=F)
type_i = eycp_df$Type[sami]
mentor_i = eycp_df$Mentor[sami]
tab_type = table(type_i)
tab_mentor = table(mentor_i)
if((max(tab_type)==2)&(max(tab_mentor==1))){
fit_i = T
} else {fit_i = F}
return(
list(
sami = sami,
max_type = max(tab_type),
max_mentor = max(tab_mentor),
fit = fit_i
)
)
}
sample1()
sample1 = function(){
sami = sample(eycp_df$ID, size=4, replace=F)
type_i = eycp_df$Type[sami]
mentor_i = eycp_df$Mentor[sami]
tab_type = table(type_i)
tab_mentor = table(mentor_i)
if((max(tab_type)==2)&(max(tab_mentor)==1)){
fit_i = T
} else {fit_i = F}
return(
list(
sami = sami,
max_type = max(tab_type),
max_mentor = max(tab_mentor),
fit = fit_i
)
)
}
sample1()
sam_mat = matrix(NA, nrow=1000, ncol = 7)
sample1()
sample1()
sample1()
sample1()
sample1()
sample1()
sample1()
sample1()
sample1()
sample1()
sam_mat = matrix(NA, nrow=10, ncol = 7)
sam_df = as.data.frame(sam_mat)
names(sam_df) = c(sprintf("S%g", 1:4), "Max type", "Max_mentor", "Fit")
for ( i in 1:10){
sam_i =sample1()
sam_df[i,1:4] = sam_i$sami
sam_df[i, 5] = sam_i$max_type
sam_df[i, 6] = sam_i$max_mentor
sam_df$[i,7] = sam_i$fit
sam_mat = matrix(NA, nrow=10, ncol = 7)
sam_df = as.data.frame(sam_mat)
names(sam_df) = c(sprintf("S%g", 1:4), "Max_type", "Max_mentor", "Fit")
for ( i in 1:10){
sam_i =sample1()
sam_df[i,1:4] = sam_i$sami
sam_df$Max_type[i] = sam_i$max_type
sam_df$Max_mentor[i] = sam_i$max_mentor
sam_d$fit[i] = sam_i$fit
}
for ( i in 1:10){
sam_i =sample1()
sam_df[i,1:4] = sam_i$sami
sam_df$Max_type[i] = sam_i$max_type
sam_df$Max_mentor[i] = sam_i$max_mentor
sam_df$fit[i] = sam_i$fit
}
sam_df
sam_mat = matrix(NA, nrow=100, ncol = 7)
sam_df = as.data.frame(sam_mat)
names(sam_df) = c(sprintf("S%g", 1:4), "Max_type", "Max_mentor", "Fit")
for ( i in 1:100){
sam_i =sample1()
sam_df[i,1:4] = sam_i$sami
sam_df$Max_type[i] = sam_i$max_type
sam_df$Max_mentor[i] = sam_i$max_mentor
sam_df$fit[i] = sam_i$fit
}
sam_df
sam_mat = matrix(NA, nrow=1000, ncol = 7)
sam_df = as.data.frame(sam_mat)
names(sam_df) = c(sprintf("S%g", 1:4), "Max_type", "Max_mentor", "Fit")
for ( i in 1:1000){
sam_i =sample1()
sam_df[i,1:4] = sam_i$sami
sam_df$Max_type[i] = sam_i$max_type
sam_df$Max_mentor[i] = sam_i$max_mentor
sam_df$fit[i] = sam_i$fit
}
sam_df[sam_df$fit]
sam_df[sam_df$fit,]
sam_df[sam_df$Fit,]
sam_mat = matrix(NA, nrow=1000, ncol = 7)
sam_df = as.data.frame(sam_mat)
names(sam_df) = c(sprintf("S%g", 1:4), "Max_type", "Max_mentor", "Fit")
for ( i in 1:1000){
sam_i =sample1()
sam_df[i,1:4] = sam_i$sami
sam_df$Max_type[i] = sam_i$max_type
sam_df$Max_mentor[i] = sam_i$max_mentor
sam_df$Fit[i] = sam_i$fit
}
sam_df[sam_df$Fit,]
eycp_df[c(7,17,3,22),]
set.seed(4498)
sam_mat = matrix(NA, nrow=1000, ncol = 7)
sam_df = as.data.frame(sam_mat)
names(sam_df) = c(sprintf("S%g", 1:4), "Max_type", "Max_mentor", "Fit")
for ( i in 1:1000){
sam_i =sample1()
sam_df[i,1:4] = sam_i$sami
sam_df$Max_type[i] = sam_i$max_type
sam_df$Max_mentor[i] = sam_i$max_mentor
sam_df$Fit[i] = sam_i$fit
}
sam_fit = sam_df[sam_df$Fit,]
sample(sam_fit$ID, size=1)
sample(1:nrow(sam_fit), size=1)
sam_fit[29,]
eycp_df[c(sam_fit[29,1:4]),]
eycp_df[sam_fit[29,1:4],]
sam_fit[29,1:4]
eycp_df[as.numeric(sam_fit[29,1:4]),]
q()
