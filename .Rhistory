coef_sex=0,
coef_armsex=0,
coef_armage=2,
coef_norm=1,
coef_unif=2,
coef_cat=1.5,
sd_err=3)
lm_lin1k = lm(outcome ~ baseline+arm+sex+age, data=df_run1k)
lm_int1k = lm(outcome ~ (baseline+arm+sex+age)*(baseline+arm+sex+age), data=df_run1k)
lm_prop1k = lm(outcome ~ baseline + arm + age + arm:age, data=df_run1k)
summary(lm_lin1k)
summary(lm_int1k)
summary(lm_prop1k)
# Resid plot for linear looks OK-ish until you colour by arm
plot(resid(lm_lin1k)~fitted(lm_lin1k), col=as.numeric(df_run1k$arm))
plot(resid(lm_int1k)~fitted(lm_int1k), col=as.numeric(df_run1k$arm))
plot(resid(lm_prop1k)~fitted(lm_prop1k), col=as.numeric(df_run1k$arm))
plot(resid(lm_prop100)~df_run100$age, col=as.numeric(df_run100$arm))
plot(resid(lm_prop1k)~df_run1k$age, col=as.numeric(df_run1k$arm))
shiny::runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment1/R_code')
runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment1/R_code')
runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment1/R_code')
runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment1/R_code')
q()
shiny::runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment1/CT4_assignment1_dashboard')
runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment2/CT4_assignment2')
dis_level = as.factor(sample(c("Mild", "Moderate", "Severe"),
size = n_total, replace = T,
prob = c(0.5,0.3, 0.2)))
n_total = 110
dis_level = as.factor(sample(c("Mild", "Moderate", "Severe"),
size = n_total, replace = T,
prob = c(0.5,0.3, 0.2)))
summary(dis_level)
hist(rnorm(1000, mean=27.5, sd=2))
?runif
runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment2/CT4_assignment2')
data(arthritis)
library(multgee)
install.packages("multgee")
library(multgee)
data(arthritis)
?arthritis
arthritis
data("licorice_gargle") # all Likert scale outcomes, not sure about use? Preventing post-op cough type symptoms
library(medicaldata)
data("licorice_gargle")
licorice_gargle
?licorice_gargle
names(licorice_gargle)
ggplot(data=licorice_gargle, aes(x=preOp_pain, fill=preOp_gender)) +
geom_bar(col=1) +
facet_wrap(~preOp_age, nrow=1) +
theme(legend.position = "bottom")
library(ggplot2)
ggplot(data=licorice_gargle, aes(x=preOp_pain, fill=preOp_gender)) +
geom_bar(col=1) +
facet_wrap(~preOp_age, nrow=1) +
theme(legend.position = "bottom")
str(licorice_gargle)
dput(names(licorice_gargle))
unique(licorice_gargle$preOp_asa)
unique(licorice_gargle$preOp_calcBMI)
unique(licorice_gargle$preOp_mallampati)
unique(licorice_gargle$preOp_smoking)
unique(licorice_gargle$preOp_pain)
unique(licorice_gargle$intraOp_surgerySize)
unique(licorice_gargle$extubation_cough)
lic_garg = licorice_gargle[ ,1:8]
# vector of names of columns to be coerced to factor
cols <- c("preOp_gender", "preOp_asa",
"preOp_mallampati", "preOp_smoking", "preOp_pain", "treat")
lic_garg[cols] <- lapply(lic_garg[cols], factor)
# Check the result:
sapply(lic_garg, class)
str(lic_garg)
ggplot(data=lic_garg, aes(x=preOp_pain, fill=preOp_gender)) +
geom_bar(col=1) +
facet_wrap(~preOp_age, nrow=1) +
theme(legend.position = "bottom")
ggplot(data=lic_garg, aes(x=preOp_pain, fill=preOp_gender)) +
geom_bar(col=1) +
facet_wrap(~preOp_smoking, nrow=1) +
theme(legend.position = "bottom")
library(rtables)
library(tibble)
library(dplyr)
install.packages("rtables")
library(rtables)
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_gender"), afun = function(x) {
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
})
tbl2 <- build_table(lyt, ADSL)
tbl2 <- build_table(lyt, lic_garg)
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_BMI"), afun = function(x) {
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
})
tbl2 <- build_table(lyt, lic_garg)
names(lic_garg)
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_calcBMI"), afun = function(x) {
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
})
tbl2 <- build_table(lyt, lic_garg)
tbl2
?rcell
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_calcBMI"), afun = function(x) {
if(is.numeric(x)){
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
} else if (is.factor(x)){
in_rows(
"Count (prop)" = rcell(c(sum(x), count(x)), format = "xx.xx (xx.xx)")
)
}
})
tbl2 <- build_table(lyt, lic_garg)
tbl2
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_calcBMI", "preOp_gender"), afun = function(x) {
if(is.numeric(x)){
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
} else if (is.factor(x)){
in_rows(
"Count (prop)" = rcell(c(sum(x), count(x)), format = "xx.xx (xx.xx)")
)
}
})
tbl2 <- build_table(lyt, lic_garg)
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_calcBMI", "preOp_gender"), afun = function(x) {
if(is.numeric(x)){
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
} else if (is.factor(x)){
in_rows(
"Count (prop)" = rcell(c(length(x), count(x)), format = "xx.xx (xx.xx)")
)
}
})
tbl2 <- build_table(lyt, lic_garg)
lyt <- basic_table() %>%
lyt <- basic_table() %>%
)
lyt <- basic_table() %>%
dim(lic_garc)
dim(lic_garg)
37*0.0130
35*0.0130
0.03014*(5/6)
0.13*60
0.0193 * 366000
data("iris")
str(iris)
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram()
library(ggplot2)
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram()
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram(position="dodge")
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram(position="dodge", bins=6)
install.packages("multigroup")
library(multigroup)
TBWvariance(iris, Species)
TBWvariance(iris, iris$Species)
?TBWvariance
iris
TBWvariance(iris[,1], iris$Species)
TBWvariance(iris["Sepal.Length"], iris$Species)
var(iris$Sepal.Length)
between.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
mean = mean(data)
ssqvec = sapply(1:ng, function(i){(means[i]-mean)^2})
ssqvec/(ng-1)
}
between.var(iris$Sepal.Length, iris$Species)
between.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
mean = mean(data)
ssqvec = sapply(1:ng, function(i){(means[i]-mean)^2})
sum(ssqvec)/(ng-1)
}
between.var(iris$Sepal.Length, iris$Species)
var(sepal.length)
var(iris$Sepal.Length
)
debug(between.var)
between.var(iris$Sepal.Length, iris$Species)
groups
ng
means
mean
ssqvec
ssqvec
0.84^2
sum(ssqvec)/3
between.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
mean = mean(data)
ssqvec = sapply(1:ng, function(i){njvec[i]*(means[i]-mean)^2})
sum(ssqvec)/(ntot-ng)
}
between.var(iris$Sepal.Length, iris$Species)
library(fivethirtyeight)
install.packages("fivethirtyeight")
library(fivethirtyeight)
data(bechdel)
?bechdel
data(mad_men)
?TBWvariance
TBWvariance
within.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
g_sums = rep(NA, ng)
for (j in 1:ng){
data_j = data[groupvec == groups[j]]
for (i in 1:njvec[j]){
ssqvec = (data_j[i] - means[j])^2
g_sums[j] = sum(ssqvec)/(njvec[i]-1)
}
}
sum(g_sums)
}
within.var(iris$Sepal.Length, iris$Species)
debug(within.var)
within.var(iris$Sepal.Length, iris$Species)
groups
ng
ntot
njvec
g_sums
within.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
g_sums = rep(NA, ng)
for (j in 1:ng){
data_j = data[groupvec == groups[j]]
ssqvec = rep(NA, njvec[j])
for (i in 1:njvec[j]){
ssqvec[i] = (data_j[i] - means[j])^2
}
g_sums[j] = sum(ssqvec)/(njvec[i]-1)
}
sum(g_sums)
}
between.var(iris$Sepal.Length, iris$Species)
within.var(iris$Sepal.Length, iris$Species)
debug(within.vRar)
debug(within.var)
within.var(iris$Sepal.Length, iris$Species)
njvec
data_j
ssqvec
g_sums
ssqvec
sum(ssqvec)
sum(ssqvec)/(njvec[i]-1)
sum(ssqvec)/(njvec[j]-1)
within.var
within.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
g_sums = rep(NA, ng)
for (j in 1:ng){
data_j = data[groupvec == groups[j]]
ssqvec = rep(NA, njvec[j])
for (i in 1:njvec[j]){
ssqvec[i] = (data_j[i] - means[j])^2
}
g_sums[j] = sum(ssqvec)/(njvec[j]-1)
}
sum(g_sums)
}
between.var(iris$Sepal.Length, iris$Species)
within.var(iris$Sepal.Length, iris$Species)
TBWvariance(iris["Sepal.Length"], iris$Species)
var(iris$Sepal.Length)
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
# for lecture notes
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials/lecture_notes")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
# for lecture notes
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials/lecture_notes")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
data()
?rearrest
?aml
aml
?wtih
?with
with(data=aml, Surv(time,status))
?Surv
?survfit
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
km_aml = survfit(surv_aml ~ x, data=aml)
surv_aml = with(data=aml, Surv(time,status))
km_aml = survfit(surv_aml ~ x, data=aml)
summary(km_aml)
plot(km_aml)
plot(km_aml, col=c(1,2))
autoplot(km_aml)
?autoplot
?bladder
?bladder1
?bladder
names(bladder)
dim(bladder)
summary(bladder$enum)
summary(bladder1$enum)
summary(bladder1$status)
?cgd
summary(cgd)
summary(cgd0)
summary(cgd[cgd$enum==1,])
?colon
dim(colon)
with(data=colon, Surv(time, status))
survfit(Surv(time, status)~rx, data=colon)
autoplot(survfit(Surv(time, status)~rx, data=colon))
?colon
colondf = colon[colon$rx!="Lev",]
dim(colondf)
?autoplot.survfit
autoplot(km_aml, conf.int=F)
str(colondf)
colondf$rx = as.factor(as.character(colondf$rx))
str(colondf)
km_colon = survfit(Surv(stop, status) ~ rx, data=colon)
km_colon = survfit(Surv(time, status) ~ rx, data=colon)
autoplot(km_colon, conf.int=F)
km_colon = survfit(Surv(time, status) ~ rx, data=colondf)
autoplot(km_colon, conf.int=F)
autoplot(km_colon, conf.int=F) + xlim(0,1)
autoplot(km_colon, conf.int=F) + ylim(0,1)
km_colon = survfit(Surv(time, status) ~ rx+sex, data=colondf)
autoplot(km_colon, conf.int=F) + ylim(0,1)
km_colon = survfit(Surv(time, status) ~ rx + obstruct, data=colondf)
autoplot(km_colon, conf.int=F) + ylim(0,1)
str(aml)
mC_aml = sum((aml$status==1)&(aml$x==1))
mT_aml = sum((aml$status==1)&(aml$x==2))
tsum_aml_C = sum(aml$time[aml$x==1])
tsum_aml_T = sum(aml$time[aml$x==2])
m_aml = mT_aml + mC_aml
tsum_aml = tsum_aml_C + tsum_aml_T
lamhat_aml_C = mC_aml / tsum_aml_C
lamhat_aml_T = mT_aml / tsum_aml_T
lamhat_aml_C
mC_aml
mC_aml = sum((aml$status==1)&(aml$x=="Nonmaintained"))
mT_aml = sum((aml$status==1)&(aml$x=="Maintained"))
mC_aml
tsum_aml_C = sum(aml$time[aml$x=="Nonmaintained"])
tsum_aml_T = sum(aml$time[aml$x=="Maintained"])
m_aml = mT_aml + mC_aml
tsum_aml = tsum_aml_C + tsum_aml_T
lamhat_aml_C = mC_aml / tsum_aml_C
lamhat_aml_T = mT_aml / tsum_aml_T
lamhat_aml_C
lamhat_aml_T
autplot(km_aml)
autoplot(km_aml)
autoplot(km_aml, conf.int=F) + ylim(0,1) + theme_bw() +
geom_function(fun=exp_st, args=list(lambda = lamhat_aml_C))
exp_st = function(t, lambda){exp(-lambda*t)}
autoplot(km_aml, conf.int=F) + ylim(0,1) + theme_bw() +
geom_function(fun=exp_st, args=list(lambda = lamhat_aml_C))
autoplot(km_aml, conf.int=F) + ylim(0,1) + theme_bw() +
geom_function(fun=exp_st, args=list(lambda = lamhat_aml_C), col="red") +
geom_function(fun=exp_st, args=list(lambda = lamhat_aml_T), col="blue") +
```
autoplot(km_aml, conf.int=F) + ylim(0,1) + theme_bw() +
geom_function(fun=exp_st, args=list(lambda = lamhat_aml_C), col="red") +
geom_function(fun=exp_st, args=list(lambda = lamhat_aml_T), col="blue")
autoplot(km_aml, conf.int=F) + ylim(0,1) + theme_bw() +
geom_function(fun=exp_st, args=list(lambda = lamhat_aml_C), col="blue") +
geom_function(fun=exp_st, args=list(lambda = lamhat_aml_T), col="red")
autoplot(km_aml, conf.int=F) + ylim(0,1) + theme_bw() +
geom_function(fun=exp_st, args=list(lambda = lamhat_aml_C), col="darkturquoise") +
geom_function(fun=exp_st, args=list(lambda = lamhat_aml_T), col="red")
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
?aml
LRstat_aml =  2*(mC_aml*log(mC_aml/tsum_aml_C) + mT_aml*log(mT_aml/tsum_aml_T) - m_aml*log(m_aml/tsum_aml))
LRstat_aml
1-pchisq(LRstat_aml, df=1)
str(colondf)
mC_colon = sum((colondf$status==1)&(colondf$rx=="Obs"))
mT_colon = sum((colondf$status==1)&(colondf$rx=="Lev+5FU"))
tsum_colon_C = sum(colondf$time[colondf$rx=="Obs"])
tsum_colon_T = sum(colondf$time[colondf$rx=="Lev+5FU"])
lamhat_colon_C = mC_colon / tsum_colon_C
lamhat_colon_T = mT_colon / tsum_colon_T
autoplot(km_colon, conf.int=F) + ylim(0,1) + theme_bw() +
geom_function(fun=exp_st, args=list(lambda = lamhat_colon_C), col="darkturquoise") +
geom_function(fun=exp_st, args=list(lambda = lamhat_colon_T), col="red")
m_colon = mT_colon + mC_colon
tsum_colon = tsum_colon_T + tsum_colon_C
LRstat_colon =  2*(mC_colon*log(mC_colon/tsum_colon_C) + mT_colon*log(mT_colon/tsum_colon_T) - m_colon*log(m_colon/tsum_colon))
LRstat_colon
1-pchisq(LRstat_colon, df=1)
?survfit
?survdiff
str(aml)
survdiff(surv_aml~x, data=aml, rho=0)
(10.69-7)^2
survdiff(surv_colon~rx, data=colondf, rho=0)
survdiff(Surv(time, status)~rx, data=colondf, rho=0)
?aml
coxph(formula = Surv(time, status)~x, data=aml)
summary(coxph(formula = Surv(time, status)~x, data=aml))
?colon
coxph(formula = Surv(time, status)~rx, data=colondf)
coxph(formula = Surv(time, status)~rx + sex + age + obstruct + nodes, data=colondf)
km_colon_bl = survfit(Surv(time, status) ~ rx + nodes, data=colon)
autoplot(km_colon_bl, conf.int=F)
km_colon_bl = survfit(Surv(time, status) ~ rx + sex, data=colon)
autoplot(km_colon_bl, conf.int=F)
km_colon_bl = survfit(Surv(time, status) ~ rx + sex, data=colondf)
autoplot(km_colon_bl, conf.int=F)
summary(colondf$nodes)
colondf$nodes4 = sapply(1:nrow(colondf), function(i){ifelse(colondf$nodes[i]>4, 1, 0)})
km_colon_bl = survfit(Surv(time, status) ~ rx + nodes4, data=colondf)
autoplot(km_colon_bl, conf.int=F)
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
pwd
getwd()
part_csv = read.csv("/Users/rachelo/Downloads/participant_data (5).csv", header=T)
part_csv
part_csv$arm = sample(c("A", "B"), 200)
part_csv$arm = sample(c("A", "B"), 200, replace=T)
write.csv(part_csv, file = "/Users/rachelo/Downloads/alloc_eg.csv", quotes=F, row.names = F)
write.csv(part_csv, file = "/Users/rachelo/Downloads/alloc_eg.csv", quote=F, row.names = F)
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
q()
