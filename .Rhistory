lyt <- basic_table() %>%
)
lyt <- basic_table() %>%
dim(lic_garc)
dim(lic_garg)
37*0.0130
35*0.0130
0.03014*(5/6)
0.13*60
0.0193 * 366000
data("iris")
str(iris)
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram()
library(ggplot2)
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram()
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram(position="dodge")
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram(position="dodge", bins=6)
install.packages("multigroup")
library(multigroup)
TBWvariance(iris, Species)
TBWvariance(iris, iris$Species)
?TBWvariance
iris
TBWvariance(iris[,1], iris$Species)
TBWvariance(iris["Sepal.Length"], iris$Species)
var(iris$Sepal.Length)
between.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
mean = mean(data)
ssqvec = sapply(1:ng, function(i){(means[i]-mean)^2})
ssqvec/(ng-1)
}
between.var(iris$Sepal.Length, iris$Species)
between.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
mean = mean(data)
ssqvec = sapply(1:ng, function(i){(means[i]-mean)^2})
sum(ssqvec)/(ng-1)
}
between.var(iris$Sepal.Length, iris$Species)
var(sepal.length)
var(iris$Sepal.Length
)
debug(between.var)
between.var(iris$Sepal.Length, iris$Species)
groups
ng
means
mean
ssqvec
ssqvec
0.84^2
sum(ssqvec)/3
between.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
mean = mean(data)
ssqvec = sapply(1:ng, function(i){njvec[i]*(means[i]-mean)^2})
sum(ssqvec)/(ntot-ng)
}
between.var(iris$Sepal.Length, iris$Species)
library(fivethirtyeight)
install.packages("fivethirtyeight")
library(fivethirtyeight)
data(bechdel)
?bechdel
data(mad_men)
?TBWvariance
TBWvariance
within.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
g_sums = rep(NA, ng)
for (j in 1:ng){
data_j = data[groupvec == groups[j]]
for (i in 1:njvec[j]){
ssqvec = (data_j[i] - means[j])^2
g_sums[j] = sum(ssqvec)/(njvec[i]-1)
}
}
sum(g_sums)
}
within.var(iris$Sepal.Length, iris$Species)
debug(within.var)
within.var(iris$Sepal.Length, iris$Species)
groups
ng
ntot
njvec
g_sums
within.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
g_sums = rep(NA, ng)
for (j in 1:ng){
data_j = data[groupvec == groups[j]]
ssqvec = rep(NA, njvec[j])
for (i in 1:njvec[j]){
ssqvec[i] = (data_j[i] - means[j])^2
}
g_sums[j] = sum(ssqvec)/(njvec[i]-1)
}
sum(g_sums)
}
between.var(iris$Sepal.Length, iris$Species)
within.var(iris$Sepal.Length, iris$Species)
debug(within.vRar)
debug(within.var)
within.var(iris$Sepal.Length, iris$Species)
njvec
data_j
ssqvec
g_sums
ssqvec
sum(ssqvec)
sum(ssqvec)/(njvec[i]-1)
sum(ssqvec)/(njvec[j]-1)
within.var
within.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
g_sums = rep(NA, ng)
for (j in 1:ng){
data_j = data[groupvec == groups[j]]
ssqvec = rep(NA, njvec[j])
for (i in 1:njvec[j]){
ssqvec[i] = (data_j[i] - means[j])^2
}
g_sums[j] = sum(ssqvec)/(njvec[j]-1)
}
sum(g_sums)
}
between.var(iris$Sepal.Length, iris$Species)
within.var(iris$Sepal.Length, iris$Species)
TBWvariance(iris["Sepal.Length"], iris$Species)
var(iris$Sepal.Length)
?Veteran
library(survival)
?veteran
knitr::opts_chunk$set(echo = TRUE)
km_va = survfit(Surv(time, status) ~ trt, data=veteran)
autoplot(km_va)
library(ggplot2)
?require
km_va = survfit(Surv(time, status) ~ trt, data=veteran)
autoplot(km_va)
summary(km_va)
?autoplot
km_va = survfit(Surv(time, status) ~ trt, data=veteran)
autoplot(km_va)
knitr::opts_chunk$set(echo=FALSE, message = FALSE, warning = FALSE)
htmltools::tagList(rmarkdown::html_dependency_font_awesome())
# This line sometimes needs commenting out to first generate the html file
options(knitr.table.format = function() {
if (knitr::is_latex_output())
"latex" else "pipe"
})
library(ggfortify)
autoplot(km_va)
autoplot(km_va, conf.int=F)
sr_va = survreg(Surv(time, status) ~ trt, dist='weibull', data=veteran)
autoplot(sr_va)
summary(sr_va)
str(vetera)
str(veteran)
summary(veteran$trt)
sr_va = survreg(Surv(time, status) ~ as.factor(trt), dist='weibull', data=veteran)
tpred_vaA = predict(sr_va, newdata=list(trt=1),type="quantile",p=seq(.01,.99,by=.01))
tpred_vaB = predict(sr_va, newdata=list(trt=1),type="quantile",p=seq(.01,.99,by=.01))
va_weib_df = data.frame(
time = c(tpred_vaA, tpred_vaB),
prob = c(seq(.01,.99,by=.01), seq(.01,.99,by=.01)),
trt = as.factor(c(rep(1, 99), rep(1, 99))))
plot(va_km_fit, xlab="Time", ylab = "S(t)", col=c(1,2))
plot(va_km, xlab="Time", ylab = "S(t)", col=c(1,2))
plot(km_va, xlab="Time", ylab = "S(t)", col=c(1,2))
lines(va_weib_df$time[va_weib_df$trt==1], 1-va_weib_df$prob[va_weib_df$trt==1], type="l", col=1, lty=2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggfortify)
library(survival)
autoplot(km_va, conf.int=F) + geom_line(data=va_weib_df, aes(x=time, y=1-prob, col=trt))
tpred_vaB = predict(sr_va, newdata=list(trt=2),type="quantile",p=seq(.01,.99,by=.01))
va_weib_df = data.frame(
time = c(tpred_vaA, tpred_vaB),
prob = c(seq(.01,.99,by=.01), seq(.01,.99,by=.01)),
trt = as.factor(c(rep(1, 99), rep(1, 99))))
autoplot(km_va, conf.int=F) + geom_line(data=va_weib_df, aes(x=time, y=1-prob, col=trt))
va_weib_df
tpred_vaA = predict(sr_va, newdata=list(trt=1),type="quantile",p=seq(.01,.99,by=.01))
tpred_vaB = predict(sr_va, newdata=list(trt=2),type="quantile",p=seq(.01,.99,by=.01))
va_weib_df = data.frame(
time = c(tpred_vaA, tpred_vaB),
prob = c(seq(.01,.99,by=.01), seq(.01,.99,by=.01)),
trt = as.factor(c(rep(1, 99), rep(2, 99))))
autoplot(km_va, conf.int=F) + geom_line(data=va_weib_df, aes(x=time, y=1-prob, col=trt))
coxph(formula = Surv(time, status)~as.factor(trt), data=veteran)
str(veteran)
?veteran
coxph(formula = Surv(time, status)~as.factor(trt) + celltype + age + diagtime + prior, data=veteran)
km_va2 = survfit(Surv(time, status) ~ as.factor(trt)+celltype, data=veteran)
autoplot(km_va2, conf.int=F)
km_va2 = survfit(Surv(time, status) ~ celltype, data=veteran)
autoplot(km_va2, conf.int=F)
q()
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
surv_sim = function(
nsim,  # number of simulations to run
alpha, # the significance level of the test
npart, # number of participants per group (roughly)
shape, # shape paramer for Weibull, assumed same for both groups
MC,    # median survival time - group C
MT,    # median survival time.- group T
p_cens, # probability of censoring for each observation
t_max   # end point of trial
){
H0_reject_vec = rep(NA, nsim)
for (i in 1:nsim){
df_i = surv_data(npart=npart, shape=shape,MC=MC, MT=MT, p_cens=p_cens, t_max=t_max)
log_rank_i = survdiff(Surv(time, status) ~ group, data=df_i, rho=0)
p_val = log_rank_i$pvalue
H0_reject_vec[i]= ifelse(p_val < alpha, 1, 0)
}
power.est = mean(H0_reject_vec)
power.est
}
surv_sim = function(
nsim,  # number of simulations to run
alpha, # the significance level of the test
npart, # number of participants per group (roughly)
shape, # shape paramer for Weibull, assumed same for both groups
MC,    # median survival time - group C
MT,    # median survival time.- group T
p_cens, # probability of censoring for each observation
t_max   # end point of trial
){
H0_reject_vec = rep(NA, nsim)
for (i in 1:nsim){
df_i = surv_data(npart=npart, shape=shape,MC=MC, MT=MT, p_cens=p_cens, t_max=t_max)
log_rank_i = survdiff(Surv(time, status) ~ group, data=df_i, rho=0)
p_val = log_rank_i$pvalue
H0_reject_vec[i]= ifelse(p_val < alpha, 1, 0)
}
power.est = mean(H0_reject_vec)
power.est
}
survsim1 = surv_sim(nsim=100, alpha=0.05, npart=100, shape=2,MC=5, MT=7, p_cens=0.1, t_max=10)
survsim1
## THIS IS DEFNITELY NOT GIVING THE RIGHT DATA!
surv_data = function(
npart, # number of participants per group (roughly)
shape, # shape paramer for Weibull, assumed same for both groups
MC,    # median survival time - group C
MT,    # median survival time.- group T
p_cens, # probability of censoring for each observation
t_max   # end point of trial
){
scaleC = log(2)/(MC^shape)
scaleT = log(2)/(MT^shape)
# transform for R
RscaleC = scaleC^(-1/shape)
RscaleT = scaleT^(-1/shape)
dat_mat = matrix(NA, nrow=2*npart, ncol=3)
dat_df = as.data.frame(dat_mat)
names(dat_df) = c("time", "status", "group")
for (i in 1:(2*npart)){
# Using SRS here, but could use something else
group_i = sample(c("C", "T"), size=1)
# Generate time accordingly
if (group_i == "C"){
time_i = round(rweibull(1, shape=shape, scale=RscaleC))
} else if (group_i == "T"){
time_i = round(rweibull(1, shape=shape, scale=RscaleT))
}
# Determine whether observation i is censored
status_i = sample(c(0,1), size=1, prob = c(p_cens, 1-p_cens))
if(time_i>t_max){
time_i = t_max
status_i = 0
}
# Having a zero time observation messes things up so we fudge it slightly
if(time_i == 0){
time_i = 1
status_i = 1
}
dat_df[i,] = c(time_i, status_i, group_i)
}
# Round to 0 dp for a hint of reality
dat_df$time = as.numeric(dat_df$time)
dat_df$status = as.numeric(dat_df$status)
dat_df$group = as.factor(dat_df$group)
return(dat_df)
}
surv_sim = function(
nsim,  # number of simulations to run
alpha, # the significance level of the test
npart, # number of participants per group (roughly)
shape, # shape paramer for Weibull, assumed same for both groups
MC,    # median survival time - group C
MT,    # median survival time.- group T
p_cens, # probability of censoring for each observation
t_max   # end point of trial
){
H0_reject_vec = rep(NA, nsim)
for (i in 1:nsim){
df_i = surv_data(npart=npart, shape=shape,MC=MC, MT=MT, p_cens=p_cens, t_max=t_max)
log_rank_i = survdiff(Surv(time, status) ~ group, data=df_i, rho=0)
p_val = log_rank_i$pvalue
H0_reject_vec[i]= ifelse(p_val < alpha, 1, 0)
}
power.est = mean(H0_reject_vec)
power.est
}
survsim1 = surv_sim(nsim=100, alpha=0.05, npart=100, shape=2,MC=5, MT=7, p_cens=0.1, t_max=10)
survsim1
survsim1 = surv_sim(nsim=100, alpha=0.05, npart=50, shape=2,MC=5, MT=7, p_cens=0.1, t_max=10)
survsim1
survsim1 = surv_sim(nsim=100, alpha=0.05, npart=100, shape=2,MC=6, MT=7, p_cens=0.1, t_max=10)
survsim1
surv_sim(nsim=100, alpha=0.05, npart=150, shape=2,MC=6, MT=7, p_cens=0.1, t_max=10)
surv_sim(nsim=100, alpha=0.05, npart=200, shape=2,MC=6, MT=7, p_cens=0.1, t_max=10)
surv_sim(nsim=100, alpha=0.05, npart=250, shape=2,MC=6, MT=7, p_cens=0.1, t_max=10)
survsim_vec1 = rep(NA, 100)
for (i in 1:100){
survsim_vec1[i] = surv_sim(nsim=100, alpha=0.05, npart=250, shape=2,MC=6, MT=7, p_cens=0.1, t_max=10)
}
ggplot(mapping = aes(survsim_vec1)) + geom_histogram(bins=10)
survsim_vec1 = rep(NA, 100)
for (i in 1:100){
survsim_vec1[i] = surv_sim(nsim=100, alpha=0.05, npart=240, shape=2,MC=6, MT=7, p_cens=0.1, t_max=10)
}
for (i in 1:100){
survsim_vec1[i] = surv_sim(nsim=100, alpha=0.05, npart=240, shape=2,MC=6, MT=7, p_cens=0.1, t_max=10)
}
ggplot(mapping = aes(survsim_vec1)) + geom_histogram(bins=10)
surv_sim(nsim=100, alpha=0.05, npart=245, shape=2,MC=6, MT=7, p_cens=0.1, t_max=15)
surv_sim(nsim=100, alpha=0.05, npart=200, shape=2,MC=6, MT=7, p_cens=0.1, t_max=15)
surv_sim(nsim=100, alpha=0.05, npart=210, shape=2,MC=6, MT=7, p_cens=0.1, t_max=15)
surv_sim(nsim=100, alpha=0.05, npart=220, shape=2,MC=6, MT=7, p_cens=0.1, t_max=15)
surv_sim(nsim=100, alpha=0.05, npart=220, shape=2,MC=6, MT=7, p_cens=0.1, t_max=20)
survsim_vec2 = rep(NA, 100)
for (i in 1:100){
survsim_vec2[i] = surv_sim(nsim=100, alpha=0.05, npart=220, shape=2,MC=6, MT=7, p_cens=0.1, t_max=20)
}
for (i in 1:100){
survsim_vec2[i] = surv_sim(nsim=100, alpha=0.05, npart=220, shape=2,MC=6, MT=7, p_cens=0.1, t_max=20)
}
ggplot(mapping = aes(survsim_vec2)) + geom_histogram(bins=10)
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
ggpairs(select(BtheB, starts_with("bdi")), aes(col = BtheB$treatment), lower = list(continuous = "smooth"))
?starts_with
StartsWith
?starts_with
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
sim_vec6 = rep(NA, 100)
for (i in 1:100){
sim_vec6[i] = ancova_sim_srs(nsim=100, N=155, mu_B=50, mu=60,
rho=0.65, tm=2, sd_eps=1, sd_B = 5)
}
ggplot(mapping = aes(sim_vec6)) + geom_histogram(bins=10)
sim_vec6
ancova_sim_srs = function(
nsim,  # the number of simulations to use
N,       # Number of participants per group
mu_B,    # baseline mean
mu,      # outcome mean (control group / H_0)
rho,     # correlation between baseline and outcome
tm,      # minimum detectable effect size
sd_eps,  # SD of error
sd_B     # SD of baseline measurement
){
H0_reject_vec = rep(NA, nsim) # to store 1 if H0 rejected, 0 if fail to reject H0
for (i in 1:nsim){
trial_i = ancova_trial_srs(N, mu_B, mu, rho, tm, sd_eps, sd_B)
H0_reject_vec[i] = ifelse(trial_i$coefficients[3,4]<0.05, 1, 0)
}
power.est = mean(H0_reject_vec)
power.est
}
ancova_sim_srs(nsim=100, N=155, mu_B=50, mu=60,
rho=0.65, tm=2, sd_eps=1, sd_B = 5)
ancova_sim_srs(nsim=100, N=55, mu_B=50, mu=60,
rho=0.65, tm=2, sd_eps=1, sd_B = 5)
debug(ancova_sim_srs)
ancova_sim_srs(nsim=100, N=55, mu_B=50, mu=60,
rho=0.65, tm=2, sd_eps=1, sd_B = 5)
summary(trial_i)
summary(trial_i)
trial_i
ancova_sim_srs(nsim=100, N=55, mu_B=50, mu=60,
rho=0.5, tm=2, sd_eps=2, sd_B = 5)
trial_i
ancova_sim_srs(nsim=100, N=55, mu_B=50, mu=60,
rho=0.5, tm=1, sd_eps=2, sd_B = 5)
trial_i
ancova_sim_srs(nsim=100, N=55, mu_B=50, mu=60,
rho=0.5, tm=1, sd_eps=2, sd_B = 5)
ancova_sim_srs(nsim=100, N=155, mu_B=50, mu=60,
rho=0.65, tm=3, sd_eps=5, sd_B = 8)
trial_i
trial_i
trial_i
trial_i
trial_i
ancova_sim_srs(nsim=100, N=100, mu_B=50, mu=60,
rho=0.65, tm=3, sd_eps=5, sd_B = 8)
trial_i
trial_i
trial_i
trial_i
trial_i
## Function to simulate one trial (with ANCOVA analysis)
ancova_trial_srs = function(
N,       # Number of participants per group
mu_B,    # baseline mean
mu,      # outcome mean (control group / H_0)
rho,     # correlation between baseline and outcome
tm,      # minimum detectable effect size
sd_eps,  # SD of error
sd_B     # SD of baseline measurement
){
## Empty data frame for trial data
trial_mat = matrix(NA, ncol=3, nrow=2*N)
trial_df = data.frame(trial_mat)
names(trial_df) = c("baseline", "arm", "outcome")
for (i in 1:(2*N)){
bas_i = rnorm(1, mean=mu_B, sd=sd_B)
trial_df$baseline[i] = bas_i
alloc_i = sample(c("C", "T"), 1) # Using SRS in this function
trial_df$arm[i] = alloc_i
eps_i = rnorm(1, mean=0, sd=sd_eps)
if(alloc_i == "C"){
out_i = mu + rho*(bas_i - mu_B) + eps_i
} else if (alloc_i == "T"){
out_i = mu + tm + rho*(bas_i - mu_B) + eps_i
}
trial_df$outcome[i] = out_i
}
model.fit = lm(outcome ~ baseline + arm, data=trial_df)
summary(model.fit)
}
ancova_sim_srs = function(
nsim,  # the number of simulations to use
N,       # Number of participants per group
mu_B,    # baseline mean
mu,      # outcome mean (control group / H_0)
rho,     # correlation between baseline and outcome
tm,      # minimum detectable effect size
sd_eps,  # SD of error
sd_B     # SD of baseline measurement
){
H0_reject_vec = rep(NA, nsim) # to store 1 if H0 rejected, 0 if fail to reject H0
for (i in 1:nsim){
trial_i = ancova_trial_srs(N, mu_B, mu, rho, tm, sd_eps, sd_B)
H0_reject_vec[i] = ifelse(trial_i$coefficients[3,4]<0.05, 1, 0)
}
power.est = mean(H0_reject_vec)
power.est
}
sim_vec6 = rep(NA, 100)
for (i in 1:100){
sim_vec6[i] = ancova_sim_srs(nsim=100, N=75, mu_B=50, mu=60,
rho=0.65, tm=3, sd_eps=5, sd_B = 8)
}
for (i in 1:100){
sim_vec6[i] = ancova_sim_srs(nsim=100, N=75, mu_B=50, mu=60,
rho=0.65, tm=3, sd_eps=5, sd_B = 8)
}
ggplot(mapping = aes(sim_vec6)) + geom_histogram(bins=10)
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
