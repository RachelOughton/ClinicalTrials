CZplot = ROC_allT_plot(meanD=1, sdD=1.5, meanND=0, sdND=1, xlims = c(-5,5), CZ=T)
grid.arrange(
distplot_Y, Yplot,
distplot_ER, ERplot,
distplot_CZ, CZplot,
ncol=2)
ROC_allT_plot = function(
meanD,   # mean and SD for diseased group
sdD,
meanND,  # mean and SD for non-diseased group
sdND,
xlims,    # xlims for plot (and thresh)
highlight = NULL,
cutoff_tail = TRUE,
Youden = FALSE,
ER = FALSE,
CZ = FALSE
){
thresh_vec = seq(xlims[1], xlims[2], by=0.1)
if(!any(thresh_vec == highlight)){
thresh_vec = sort(c(highlight, thresh_vec))
}
nt = length(thresh_vec)
T = thresh_vec
Spec = sapply(1:nt, function(i){pnorm(thresh_vec[i], mean = meanND, sd=sdND)})
Sens = sapply(1:nt, function(i){1-pnorm(thresh_vec[i], mean = meanD, sd=sdD)})
ND_dis = sapply(1:nt, function(i){dnorm(thresh_vec[i], mean=meanND, sd=sdND)})
D_dis = sapply(1:nt, function(i){dnorm(thresh_vec[i], mean=meanD, sd=sdD)})
sum_df = data.frame(T=T, Spec=Spec, Sens=Sens, ND_dis=ND_dis, D_dis = D_dis)
sum_df$oneMspec = 1-sum_df$Spec
## Calculate AUC using x and y coords:
AUC = 0
for (i in 1:(nt-1)){
# seems wrong way around but T is going from right to left
x_diff_i = sum_df$oneMspec[i] - sum_df$oneMspec[i+1]
height_i = (sum_df$Sens[i] + sum_df$Sens[i+1])/2
#    height_i = sum_df$Sens[i]
area_i = height_i * x_diff_i
AUC = AUC + area_i
}
sum_df_plot = sum_df
if (cutoff_tail == TRUE){
sum_df_plot = sum_df[(sum_df$Sens<=0.999)&(sum_df$Sens>0.001),]
}
plot = ggplot(data=sum_df_plot, aes(x=oneMspec, y=Sens, col=T)) + geom_path() +
xlab("1 - Specificity") + ylab("Sensitivity") + xlim(0,1) + ylim(0,1) +
scale_color_gradient2(
low = "orange",
mid = "magenta",
high = "blue",
midpoint = mean(sum_df_plot$T)
) + geom_abline(slope=1, lty=2) +
ggtitle(sprintf("AUC = %g (3 s.f.)", round(AUC, digits=3)))
if(is.numeric(highlight)){
plot = plot + geom_point(data= sum_df_plot[sum_df_plot$T == highlight,], aes(x=oneMspec, y=Sens), size=2, col="black")
}
if(Youden == TRUE){
sum_df$Youden = sum_df$Spec + sum_df$Sens - 1
T_Youden = sum_df$T[sum_df$Youden == max(sum_df$Youden)]
row_Youden = sum_df_plot[sum_df_plot$T == T_Youden,]
plot = plot + geom_point(data= row_Youden, aes(x=oneMspec, y=Sens), size=2, col="red")+
ggtitle(sprintf("Youden T = %g", T_Youden))
}
if(ER==TRUE){
sum_df$ER = sqrt((1-sum_df$Sens)^2 + (1-sum_df$Spec)^2)
T_ER = sum_df$T[sum_df$ER == min(sum_df$ER)]
row_ER = sum_df[sum_df$T == T_ER,]
plot = plot + geom_point(data= row_ER, aes(x=oneMspec, y=Sens), size=2, col="red")+
ggtitle(sprintf("ER T = %g", T_ER))
}
if(CZ==TRUE){
sum_df$CZ = sum_df$Sens*sum_df$Spec
T_CZ = sum_df$T[sum_df$CZ == max(sum_df$CZ)]
row_CZ = sum_df[sum_df$T == T_CZ,]
plot = plot + geom_point(data= row_CZ, aes(x=oneMspec, y=Sens), size=2, col="red")+
ggtitle(sprintf("CZ T = %g", T_CZ))
}
plot
}
distplot_Y = ROC_dist_plot(meanD=1, sdD=1.5, meanND=0, sdND=1, xlims = c(-5,5), thresh = 0.9
)
Yplot=ROC_allT_plot(meanD=1, sdD=1.5, meanND=0, sdND=1, xlims = c(-5,5), Youden=T)
distplot_ER = ROC_dist_plot(meanD=1, sdD=1.5, meanND=0, sdND=1, xlims = c(-5,5), thresh = 0.6
)
ERplot = ROC_allT_plot(meanD=1, sdD=1.5, meanND=0, sdND=1, xlims = c(-5,5), ER=T)
distplot_CZ = ROC_dist_plot(meanD=1, sdD=1.5, meanND=0, sdND=1, xlims = c(-5,5), thresh = 0.6
)
CZplot = ROC_allT_plot(meanD=1, sdD=1.5, meanND=0, sdND=1, xlims = c(-5,5), CZ=T)
grid.arrange(
distplot_Y, Yplot,
distplot_ER, ERplot,
distplot_CZ, CZplot,
ncol=2)
distplot_Y = ROC_dist_plot(meanD=2, sdD=1.5, meanND=0, sdND=1, xlims = c(-6,8), thresh = 0.9
)
Yplot=ROC_allT_plot(meanD=1, sdD=1.5, meanND=0, sdND=1, xlims = c(-5,5), Youden=T)
distplot_ER = ROC_dist_plot(meanD=1, sdD=1.5, meanND=0, sdND=1, xlims = c(-5,5), thresh = 0.6
)
ERplot = ROC_allT_plot(meanD=1, sdD=1.5, meanND=0, sdND=1, xlims = c(-5,5), ER=T)
grid.arrange(
distplot_Y, Yplot,
distplot_ER, ERplot,
ncol=2)
distplot_Y = ROC_dist_plot(meanD=2, sdD=1.5, meanND=0, sdND=1, xlims = c(-6,8), thresh = 0.9
)
Yplot=ROC_allT_plot(meanD=2, sdD=1.5, meanND=0, sdND=1, xlims = c(-6,8), Youden=T)
distplot_ER = ROC_dist_plot(meanD=2, sdD=1.5, meanND=0, sdND=1, xlims = c(-6,8), thresh = 0.6
)
ERplot = ROC_allT_plot(meanD=2, sdD=1.5, meanND=0, sdND=1, xlims = c(-6,8), ER=T)
grid.arrange(
distplot_Y, Yplot,
distplot_ER, ERplot,
ncol=2)
curve(dlnorm(x, 4, 5))
curve(dlnorm(x, 40, 5))
curve(dlnorm(x, 10, 5))
curve(dlnorm(x, 10, 2))
curve(dlnorm(x, 10, 2), xlim=c(0,10))
curve(dlnorm(x, 10, 2), xlim=c(0,10))
curve(dlnorm(x, 10, 3), xlim=c(0,10))
curve(dlnorm(x, 10, 4), xlim=c(0,10))
?rgamma
## Need to have disease distribution generally higher than non-D
sam_dis = rnorm(10, mean=6, SD=1.5)
## Need to have disease distribution generally higher than non-D
sam_dis = rnorm(10, mean=6, sd=1.5)
sam_ndis = rgamma(40, shape = 2, scale = 2)
diag_data = data.frame(Meas = c(sam_dis, sam_ndis), True = c(rep("Disease", 10), rep("No dis", 40)))
ggplot(data=diag_data) + geom_hist(aes(x=Meas, fill=True))
## Need to have diseasex=Meas, fill=True distribution generally higher than non-D
sam_dis = rnorm(10, mean=6, sd=1.5)
sam_ndis = rgamma(40, shape = 2, scale = 2)
diag_data = data.frame(Meas = c(sam_dis, sam_ndis), True = c(rep("Disease", 10), rep("No dis", 40)))
ggplot(data=diag_data) + geom_histogram(aes())
## Need to have diseasex=Meas, fill=True distribution generally higher than non-D
sam_dis = rnorm(10, mean=6, sd=1.5)
sam_ndis = rgamma(40, shape = 2, scale = 2)
diag_data = data.frame(
Meas = c(sam_dis, sam_ndis),
True = as.factor(c(rep("Disease", 10), rep("No dis", 40))))
ggplot(data=diag_data) + geom_histogram(aes())
## Need to have diseasex=Meas, fill=True distribution generally higher than non-D
sam_dis = rnorm(10, mean=6, sd=1.5)
sam_ndis = rgamma(40, shape = 2, scale = 2)
diag_data = data.frame(
Meas = c(sam_dis, sam_ndis),
True = as.factor(c(rep("Disease", 10), rep("No dis", 40))))
ggplot(data=diag_data) + geom_histogram(aes(x=Meas, fill=True))
1/35
q()
0.99 * 0.01/ 0.2079
1-0.2079
dnorm(0, mean=0, sd=sqrt(1/1000))
dnorm(0, mean=0, sd=sqrt(1/500))
mdes = function(
m,          # initial number of children per cluster
k,          # initial number of settings recruited (total)
att_m,      # attrition at the child level
att_k,      # attrition at the setting level
icc,        # intra-cluster correlation
rho_pp,    # correlation between pre- and post- intervention measuremnets
typeI = 0.05,
power = 0.8
){
m_eff = m*(1-att_m)
k_eff = k*(1-att_k)
z_typeI = qnorm(1-0.5*typeI)
z_power = qnorm(power)
const = sqrt(2)*(z_typeI + z_power)
sqrt_term = (1+icc*(m_eff-1))*(1-rho_pp^2)/(m_eff*k_eff)
mdes = const * sqrt(sqrt_term)
mdes
}
mdes(m=45, k=180, att_m=0.15, att_k=0, icc=0.15, rho_pp=0.5)
mdes(m=10, k=100, att_m=0.2, att_k=0.15, icc=0.19, rho_pp=0.6)
mdes(m=8, k=100, att_m=0.2, att_k=0.15, icc=0.19, rho_pp=0.6)
mdes(m=10, k=100, att_m=0, att_k=0, icc=0.19, rho_pp=0.6)
att_m=0.2
att_k=0.15
k=100
m_vec = c(6, 8, 10, 15)
icc_vec = c(0.11, 0.15, 0.19)
rho_pp_vec = c(0.5, 0.6, 0.7)
mdes_df = expand.grid(icc=icc_vec, rho_pp=rho_pp_vec, m=m_vec, KEEP.OUT.ATTRS = FALSE)
## If we recruit 100 initially
mdes_df$mdes_k100 = rep(NA, nrow(mdes_df))
for (i in 1:nrow(mdes_df)){
mdes_i = mdes(m=mdes_df$m[i], k=100, att_m=att_m, att_k=att_k,
icc=mdes_df$icc[i], rho_pp=mdes_df$rho_pp[i])
mdes_df$mdes_k100[i] = mdes_i
}
mdes_df$mdes_k100noatt = rep(NA, nrow(mdes_df))
for (i in 1:nrow(mdes_df)){
mdes_i = mdes(m=mdes_df$m[i], k=100, att_m=0, att_k=0,
icc=mdes_df$icc[i], rho_pp=mdes_df$rho_pp[i])
mdes_df$mdes_k100noatt[i] = mdes_i
}
mdes_df = mdes_df[ ,c(3,2,1,4,5)]
library(kableExtra)
mdes_df%>%kbl(caption = "MDES values for combinations of intra-cluster correlation,
pre-post correlation and average group size, assuming a total of 100
clusters recruited.",
format="latex",
digits=2,
col.names = c("Mean children per cluster", "Pre-post corr","ICC",  "MDES (with attrition)", "MDES (no attrition)"),
label = "tab:mdes")
mdes_k = function(
m,          # initial number of children per cluster
k,          # initial number of settings recruited (per arm)
att_m,      # attrition at the child level
att_k,      # attrition at the setting level
icc,        # intra-cluster correlation
rho_pp,    # correlation between pre- and post- intervention measuremnets
typeI = 0.05,
power = 0.8
){
m_eff = m*(1-att_m)
k_eff = k*(1-att_k)
z_typeI = qnorm(1-0.5*typeI)
z_power = qnorm(power)
const = sqrt(2)*(z_typeI + z_power)
sqrt_term = (1+icc*(m_eff-1))*(1-rho_pp^2)/(m_eff*k_eff)
mdes = const * sqrt(sqrt_term)
mdes
}
att_m=0.2
att_k=0.15
k=50
m_vec = c(6, 8, 10, 15)
icc_vec = c(0.11, 0.15, 0.19)
rho_pp_vec = c(0.5, 0.6, 0.7)
mdes_k = function(
m,          # initial number of children per cluster
k,          # initial number of settings recruited (per arm)
att_m,      # attrition at the child level
att_k,      # attrition at the setting level
icc,        # intra-cluster correlation
rho_pp,    # correlation between pre- and post- intervention measuremnets
typeI = 0.05,
power = 0.8
){
m_eff = m*(1-att_m)
k_eff = k*(1-att_k)
z_typeI = qnorm(1-0.5*typeI)
z_power = qnorm(power)
const = sqrt(2)*(z_typeI + z_power)
sqrt_term = (1+icc*(m_eff-1))*(1-rho_pp^2)/(m_eff*k_eff)
mdes = const * sqrt(sqrt_term)
mdes
}
att_m=0.2
att_k=0.15
k=50
m_vec = c(6, 8, 10, 15)
icc_vec = c(0.11, 0.15, 0.19)
rho_pp_vec = c(0.5, 0.6, 0.7)
mdes_df = expand.grid(icc=icc_vec, rho_pp=rho_pp_vec, m=m_vec, KEEP.OUT.ATTRS = FALSE)
## If we recruit 100 initially
mdes_df$mdes_k50 = rep(NA, nrow(mdes_df))
for (i in 1:nrow(mdes_df)){
mdes_i = mdes_k(m=mdes_df$m[i], k=100, att_m=att_m, att_k=att_k,
icc=mdes_df$icc[i], rho_pp=mdes_df$rho_pp[i])
mdes_df$mdes_k100[i] = mdes_i
}
mdes_df$mdes_k50noatt = rep(NA, nrow(mdes_df))
for (i in 1:nrow(mdes_df)){
mdes_i = mdes_k(m=mdes_df$m[i], k=100, att_m=0, att_k=0,
icc=mdes_df$icc[i], rho_pp=mdes_df$rho_pp[i])
mdes_df$mdes_k100noatt[i] = mdes_i
}
mdes_df = mdes_df[ ,c(3,2,1,4,5)]
library(kableExtra)
mdes_df%>%kbl(caption = "MDES values for combinations of intra-cluster correlation,
pre-post correlation and average group size, assuming a total of 100
clusters recruited.",
format="latex",
digits=2,
col.names = c("Mean children per cluster", "Pre-post corr","ICC",  "MDES (with attrition)", "MDES (no attrition)"),
label = "tab:mdes")
## If we recruit 100 initially
mdes_df$mdes_k50 = rep(NA, nrow(mdes_df))
for (i in 1:nrow(mdes_df)){
mdes_i = mdes_k(m=mdes_df$m[i], k=100, att_m=att_m, att_k=att_k,
icc=mdes_df$icc[i], rho_pp=mdes_df$rho_pp[i])
mdes_df$mdes_k50[i] = mdes_i
}
mdes_df$mdes_k50noatt = rep(NA, nrow(mdes_df))
for (i in 1:nrow(mdes_df)){
mdes_i = mdes_k(m=mdes_df$m[i], k=100, att_m=0, att_k=0,
icc=mdes_df$icc[i], rho_pp=mdes_df$rho_pp[i])
mdes_df$mdes_k50noatt[i] = mdes_i
}
mdes_df = mdes_df[ ,c(3,2,1,4,5)]
library(kableExtra)
mdes_df%>%kbl(caption = "MDES values for combinations of intra-cluster correlation,
pre-post correlation and average group size, assuming a total of 100
clusters recruited.",
format="latex",
digits=2,
col.names = c("Mean children per cluster", "Pre-post corr","ICC",  "MDES (with attrition)", "MDES (no attrition)"),
label = "tab:mdes")
qnorm(1-0.5*0.05)
shiny::runApp('C:/Users/d415ax/OneDrive - Durham University/AP2020_21/Projects/CoP/planning/schools/sample_size')
q()
mdes_k = function(
m,          # initial number of children per cluster
k,          # initial number of settings recruited (per arm)
att_m,      # attrition at the child level
att_k,      # attrition at the setting level
icc,        # intra-cluster correlation
rho_pp,    # correlation between pre- and post- intervention measuremnets
typeI = 0.05,
power = 0.8
){
m_eff = m*(1-att_m)
k_eff = k*(1-att_k)
z_typeI = qnorm(1-0.5*typeI)
z_power = qnorm(power)
const = sqrt(2)*(z_typeI + z_power)
sqrt_term = (1+icc*(m_eff-1))*(1-rho_pp^2)/(m_eff*k_eff)
mdes = const * sqrt(sqrt_term)
mdes
}
att_m=0.2
att_k=0.15
k=50
m_vec = c(6, 8, 10, 15)
icc_vec = c(0.11, 0.15, 0.19)
rho_pp_vec = c(0.5, 0.6, 0.7)
mdes_df = expand.grid(icc=icc_vec, rho_pp=rho_pp_vec, m=m_vec, KEEP.OUT.ATTRS = FALSE)
mdes_df
## If we recruit 100 initially
mdes_df$mdes_k50 = rep(NA, nrow(mdes_df))
mdes_df$mdes_k50_noatt = rep(NA, nrow(mdes_df))
for (i in 1:nrow(mdes_df)){
mdes_i = mdes_k(m=mdes_df$m[i], k=50, att_m=att_m, att_k=att_k,
icc=mdes_df$icc[i], rho_pp=mdes_df$rho_pp[i])
mdes_i_noatt = mdes_k(m=mdes_df$m[i], k=50, att_m=0, att_k=0,
icc=mdes_df$icc[i], rho_pp=mdes_df$rho_pp[i])
mdes_df$mdes_k50[i] = mdes_i
mdes_df$mdes_k50noatt[i] = mdes_i_noatt
}
summary(mdes_df)
## If we recruit 100 initially
mdes_df$mdes_k50 = rep(NA, nrow(mdes_df))
mdes_df$mdes_k50noatt = rep(NA, nrow(mdes_df))
for (i in 1:nrow(mdes_df)){
mdes_i = mdes_k(m=mdes_df$m[i], k=50, att_m=att_m, att_k=att_k,
icc=mdes_df$icc[i], rho_pp=mdes_df$rho_pp[i])
mdes_i_noatt = mdes_k(m=mdes_df$m[i], k=50, att_m=0, att_k=0,
icc=mdes_df$icc[i], rho_pp=mdes_df$rho_pp[i])
mdes_df$mdes_k50[i] = mdes_i
mdes_df$mdes_k50noatt[i] = mdes_i_noatt
}
summary(mdes_df)
mdes_df = expand.grid(icc=icc_vec, rho_pp=rho_pp_vec, m=m_vec, KEEP.OUT.ATTRS = FALSE)
## If we recruit 100 initially
mdes_df$mdes_k50 = rep(NA, nrow(mdes_df))
mdes_df$mdes_k50noatt = rep(NA, nrow(mdes_df))
for (i in 1:nrow(mdes_df)){
mdes_i = mdes_k(m=mdes_df$m[i], k=50, att_m=att_m, att_k=att_k,
icc=mdes_df$icc[i], rho_pp=mdes_df$rho_pp[i])
mdes_i_noatt = mdes_k(m=mdes_df$m[i], k=50, att_m=0, att_k=0,
icc=mdes_df$icc[i], rho_pp=mdes_df$rho_pp[i])
mdes_df$mdes_k50[i] = mdes_i
mdes_df$mdes_k50noatt[i] = mdes_i_noatt
}
mdes_df = mdes_df[ ,c(3,2,1,4,5)]
summary(mdes_df)
qnorm(1-0.5*0.05)
library(kableExtra)
mdes_df%>%kbl(caption = "MDES values for combinations of intra-cluster correlation,
pre-post correlation and average group size, assuming a total of 100
clusters recruited.",
format="latex",
digits=2,
col.names = c("Mean children per cluster", "Pre-post corr","ICC",  "MDES (with attrition)", "MDES (no attrition)"),
label = "tab:mdes")
shiny::runApp('C:/Users/d415ax/OneDrive - Durham University/AP2020_21/Projects/CoP/planning/schools/sample_size')
m_vec = c(8, 10)
icc = 0.19
rho = 0.6
k = 56
mdes_df2 = expand.grid(icc=icc, rho_pp=rho, m=m_vec, KEEP.OUT.ATTRS = FALSE)
## If we recruit 100 initially
mdes_df2$mdes_k56 = rep(NA, nrow(mdes_df))
mdes_df2$mdes_k56noatt = rep(NA, nrow(mdes_df))
for (i in 1:nrow(mdes_df2)){
mdes_i = mdes_k(m=mdes_df2$m[i], k=56, att_m=att_m, att_k=att_k,
icc=mdes_df2$icc[i], rho_pp=mdes_df2$rho_pp[i])
mdes_i_noatt = mdes_k(m=mdes_df2$m[i], k=56, att_m=0, att_k=0,
icc=mdes_df2$icc[i], rho_pp=mdes_df2$rho_pp[i])
mdes_df2$mdes_k50[i] = mdes_i
mdes_df2$mdes_k50noatt[i] = mdes_i_noatt
}
mdes_df2
mdes_df2 = expand.grid(icc=icc, rho_pp=rho, m=m_vec, KEEP.OUT.ATTRS = FALSE)
## If we recruit 100 initially
mdes_df2$mdes_k56 = rep(NA, nrow(mdes_df))
mdes_df2$mdes_k56noatt = rep(NA, nrow(mdes_df))
mdes_df2 = expand.grid(icc=icc, rho_pp=rho, m=m_vec, KEEP.OUT.ATTRS = FALSE)
## If we recruit 100 initially
mdes_df2$mdes_k56 = rep(NA, nrow(mdes_df2))
mdes_df2$mdes_k56noatt = rep(NA, nrow(mdes_df2))
for (i in 1:nrow(mdes_df2)){
mdes_i = mdes_k(m=mdes_df2$m[i], k=56, att_m=att_m, att_k=att_k,
icc=mdes_df2$icc[i], rho_pp=mdes_df2$rho_pp[i])
mdes_i_noatt = mdes_k(m=mdes_df2$m[i], k=56, att_m=0, att_k=0,
icc=mdes_df2$icc[i], rho_pp=mdes_df2$rho_pp[i])
mdes_df2$mdes_k56[i] = mdes_i
mdes_df2$mdes_k56noatt[i] = mdes_i_noatt
}
mdes_df2
mdes_df2%>%kbl(caption = "MDES values for combinations of intra-cluster correlation,
pre-post correlation and average group size, assuming a total of 112
clusters recruited (ie. 56 per arm).",
format="latex",
digits=2,
col.names = c("Mean children per cluster", "Pre-post corr","ICC",  "MDES (with attrition)", "MDES (no attrition)"),
label = "tab:mdes2")
?sliderInput
runApp('C:/Users/d415ax/OneDrive - Durham University/AP2020_21/Projects/CoP/planning/schools/sample_size')
mdes_k(m=8, k=50, att_m=0.2, att_k=0.15, icc=0.19, rho_pp=0.6)
mdes_ancova = function(
m,          # initial number of children per cluster
k,          # initial number of settings recruited (total)
att_m,      # attrition at the child level
att_k,      # attrition at the setting level
icc,        # intra-cluster correlation
rho_pp,    # correlation between pre- and post- intervention measuremnets
typeI = 0.05,
power = 0.8
){
m_eff = m*(1-att_m)
k_eff = k*(1-att_k)
z_typeI = qnorm(1-0.5*typeI)
z_power = qnorm(power)
const = sqrt(2)*(z_typeI + z_power)
sqrt_term = (1+icc*(m_eff-1))*(1-rho_pp^2)/(m_eff*k_eff)
mdes = const * sqrt(sqrt_term)
mdes
}
mdes_ancova(m=8, k=50, att_m=0.2, att_k=0.15, icc=0.19, rho_pp=0.6)
runApp('C:/Users/d415ax/OneDrive - Durham University/AP2020_21/Projects/CoP/planning/schools/sample_size')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ggplot() +
geom_function(fun=dnorm, args = list(mean=0, sd = sqrt(1/10)), colour="red") +
geom_function(fun = dnorm, args = list(mean=0, sd = sqrt(1/100)), lty=2, colour= "blue") +
geom_function(fun = dnorm, args = list(mean=0, sd = sqrt(1/500)), lty=3, colour= "darkgreen")+
xlim(-1.5,1.5) + ylim(0,9) +
xlab("Sample mean") +
ylab("Density")
ggplot() + geom_function(fun=dnorm, args = list(mean=5, sd = sqrt(1/10)), colour="red") + geom_function(fun=dnorm, args = list(mean=5.5, sd = sqrt(1/10)), colour="purple") + xlim(3.5,7.5) + ylab("Density")
runApp('C:/Users/d415ax/OneDrive - Durham University/AP2020_21/Projects/CoP/planning/schools/sample_size')
runApp('C:/Users/d415ax/OneDrive - Durham University/AP2020_21/Projects/CoP/planning/schools/sample_size')
q()
q()
qt(0.975, df=14)
qt(0.975, df=14)*7.82*sqrt(1/7 + 1/9)
qt(0.975, df=14)*7.82*sqrt(1/7 + 1/9) - 6.53
qt(0.975, df=14)*7.82*sqrt(1/7 + 1/9) + 6.53
# work laptop
setwd("J:/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
qt(0.99, df=14)
qt(0.6, df=14)
qt(0.975, df=14)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
df_hommel = data.frame(
patient = c(1:9, 1:7),
baseline = c(147, 129, 158, 164, 134, 155, 151, 141, 153, 133, 129, 152, 161, 154, 141, 156),
outcome = c(137, 120, 141, 137, 140, 144, 134, 123, 142, 139, 134, 136, 151, 147, 137, 149),
arm = c(rep("Captopril", 9), rep("Placebo", 7))
)
df_hommel
df_hommel$diff = df_hommel$outcome - df_hommel$baseline
df_hommel$diff
mean_cap = mean(df_hommel$diff[df_hommel$arm=="captopril"])
mean_cap = mean(df_hommel$diff[df_hommel$arm=="Captopril"])
mean_plac = mean(df_hommel$diff[df_hommel$arm=="Placebo"])
sd_plac = sd(df_hommel$diff[df_hommel$arm=="Placebo"])
sd_cap = sd(df_hommel$diff[df_hommel$arm=="Captopril"])
pool_sd = sqrt((8*sd_cap^2 + 6*sd_plac^2)/(8+6))
pool_sd
(mean_cap - mean_plac)/(pool_sd*sqrt((1/7)+(1/9)))
pt(1.847428, df=14)
1-2*pt(1.847428, df=14)
2*(1-*pt(1.847428, df=14))
2*(1-pt(1.847428, df=14))
(diff_cap - diff_plac) - qt(0.975, df=14)*pool_sd*sqrt((1/7)+(1/9))
(mean_cap - diff_plac) - qt(0.975, df=14)*pool_sd*sqrt((1/7)+(1/9))
(mean_cap - mean_plac) - qt(0.975, df=14)*pool_sd*sqrt((1/7)+(1/9))
(mean_plac - mean_cap) - qt(0.975, df=14)*pool_sd*sqrt((1/7)+(1/9))
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
?data.frame
?row.nnames
?row.names
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
sqrt((8*8.99^2 + 6*7.91^2) / (8+6)
)
(12.67 - 4.71)/(8.54*sqrt(1/7 + 1/9))
pt(1.850, df=14)
2*(1-pt(1.850, df=14))
-4.71+12.67 - qt(0.975, df=15)*8.54*sqrt(1/7+1/9)
-4.71+12.67 - qt(0.975, df=14)*8.54*sqrt(1/7+1/9)
q()
