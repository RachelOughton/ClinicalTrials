sd_err=3)
lm_lin100 = lm(outcome ~ baseline+arm+sex+age, data=df_run100)
lm_int100 = lm(outcome ~ (baseline+arm+sex+age)*(baseline+arm+sex+age), data=df_run100)
df_part1000 = gen_part(1000)
df_alloc1000 = df_part1000
df_alloc1000$arm = sample(c("A", "B"), size=1000, replace=T)
df_run1000 = run_trial(df_alloc100,
coef_baseline =1,
coef_arm=-4,
coef_sex=2,
coef_armsex=-1,
coef_armage=0,
coef_norm=1,
coef_unif=2,
coef_cat=1.5,
sd_err=3)
lm_lin1000 = lm(outcome ~ baseline+arm+sex+age, data=df_run1000)
lm_int1000 = lm(outcome ~ (baseline+arm+sex+age)*(baseline+arm+sex+age), data=df_run1000)
summary(lm_lin100)
summary(lm_lin1000)
summary(lm_int100)
summary(lm_int1000)
cor(df_run100$outcome[df_run100$arm==0], df_run100$baseline[df_run100$arm == 0])
cor(df_run100$outcome[df_run100$arm==1], df_run100$baseline[df_run100$arm == 1])
df_run1000 = run_trial(df_alloc100,
coef_baseline =1,
coef_arm=-4,
coef_sex=0,
coef_armsex=0,
coef_armage=1.5,
coef_norm=1,
coef_unif=2,
coef_cat=1.5,
sd_err=3)
lm_lin1000 = lm(outcome ~ baseline+arm+sex+age, data=df_run1000)
lm_int1000 = lm(outcome ~ (baseline+arm+sex+age)*(baseline+arm+sex+age), data=df_run1000)
summary(lm_lin100)
summary(lm_lin1000)
summary(lm_int100)
summary(lm_int1000)
plot(resid(lm_lin1000)~fitted(lm_lin1000), col=as.numeric(df_run1000$arm))
plot(resid(lm_int1000)~fitted(lm_int1000), col=as.numeric(df_run1000$arm))
plot(resid(lm_lin1000)~fitted(lm_lin1000), col=as.numeric(df_run1000$arm))
plot(resid(lm_int1000)~fitted(lm_int1000), col=as.numeric(df_run1000$arm))
plot(resid(lm_int1000)~df_run1000$age, col=as.numeric(df_run1000$arm))
lm_inta1000 = lm(outcome ~ baseline + arm + sex+ age +arm*age, data=df_run1000)
plot(resid(lm_inta1000)~df_run1000$age, col=as.numeric(df_run1000$arm))
summary(lm_inta1000)
plot(outcome ~ age, data=df_fun1000, col=arm)
plot(outcome ~ age, data=df_run1000, col=arm)
plot(resid(lm_int1000)~fitted(lm_int1000), col=as.numeric(df_run1000$arm))
plot(resid(lm_lin1000)~fitted(lm_lin1000), col=as.numeric(df_run1000$arm))
df_run1000 = run_trial(df_alloc100,
coef_baseline =1,
coef_arm=-4,
coef_sex=0,
coef_armsex=0,
coef_armage=2,
coef_norm=1,
coef_unif=2,
coef_cat=1.5,
sd_err=3)
df_run1000 = run_trial(df_alloc1000,
coef_baseline =1,
coef_arm=-4,
coef_sex=0,
coef_armsex=0,
coef_armage=2,
coef_norm=1,
coef_unif=2,
coef_cat=1.5,
sd_err=3)
gen_part = function(n_total){
ID = 1:n_total
sex = as.factor(sample(c("M", "F"), size = n_total, replace = T, prob = c(0.6,0.4)))
age = runif(n=n_total, min=50, max=65)
# I want the baseline measurement to be slightly higher in women than in men
# With the treatment we are looking for a reduction
baseline_int = 50 + 0.1*age
baseline = sapply(
1:n_total,
function(i){
rnorm(1, mean=baseline_int[i], sd=3)
}
)
# These will actually be added at the 'run trial' stage in shiny
hidden_norm = rnorm(n=n_total, mean=0, sd=1)
hidden_unif = runif(n=n_total, min=0, max=1)
hidden_cat = as.factor(sample(c("A", "B", "C"), size=n_total, replace=T))
df_part =  data.frame(ID = ID, sex=sex, age=age, baseline = baseline,
hid_norm = hidden_norm,
hid_unif = hidden_unif,
hid_cat = hidden_cat)
}
run_trial = function(
df_alloc,
coef_baseline=1,
coef_arm=-4,
coef_sex=0,
coef_armsex=0,
coef_armage=2,
coef_norm=1,
coef_unif=2,
coef_cat=1.3,
sd_err=3
){
n_tot = nrow(df_alloc)
out_temp = coef_baseline*df_alloc$baseline +
coef_arm*as.numeric(df_alloc$arm) +
coef_sex*as.numeric(df_alloc$sex) +
coef_armsex*as.numeric(df_alloc$arm)*as.numeric(df_alloc$sex)+
coef_armage*as.numeric(df_alloc$arm)*(df_alloc$age - 50)+
coef_norm*df_alloc$hid_norm +
coef_unif*df_alloc$hid_unif +
coef_cat*as.numeric(df_alloc$hid_cat) +
rnorm(n_tot, mean=0, sd=sd_err)
df_alloc$outcome = out_temp
df_alloc
}
df_part100 = gen_part(100)
df_alloc100 = df_part100
df_alloc100$arm = as.factor(sample(c("A", "B"), size = 100, replace=T))
df_run100 = run_trial(df_alloc100,
coef_baseline =1,
coef_arm=-4,
coef_sex=0,
coef_armsex=0,
coef_armage=2,
coef_norm=1,
coef_unif=2,
coef_cat=1.5,
sd_err=3)
lm_lin100 = lm(outcome ~ baseline+arm+sex+age, data=df_run100)
lm_int100 = lm(outcome ~ (baseline+arm+sex+age)*(baseline+arm+sex+age), data=df_run100)
lm_prop100 = lm(outcome ~ baseline + arm + age + arm:age, data=df_run100)
summary(lm_lin100)
summary(lm_lin1000)
summary(lm_int100)
summary(lm_prop100)
plot(resid(lm_lin100)~fitted(lm_lin100), col=as.numeric(df_run100$arm))
plot(resid(lm_int100)~fitted(lm_int100), col=as.numeric(df_run100$arm))
plot(resid(lm_prop100)~fitted(lm_prop100), col=as.numeric(df_run100$arm))
plot(resid(lm_prop100)~df_run100$age, col=as.numeric(df_run100$arm))
df_part1k = gen_part(1000)
df_alloc1k = df_part1k
df_alloc1k$arm = as.factor(sample(c("A", "B"), size = 1000, replace=T))
df_run1k = run_trial(df_alloc1k,
coef_baseline =1,
coef_arm=-4,
coef_sex=0,
coef_armsex=0,
coef_armage=2,
coef_norm=1,
coef_unif=2,
coef_cat=1.5,
sd_err=3)
lm_lin1k = lm(outcome ~ baseline+arm+sex+age, data=df_run1k)
lm_int1k = lm(outcome ~ (baseline+arm+sex+age)*(baseline+arm+sex+age), data=df_run1k)
lm_prop1k = lm(outcome ~ baseline + arm + age + arm:age, data=df_run1k)
summary(lm_lin1k)
summary(lm_int1k)
summary(lm_prop1k)
# Resid plot for linear looks OK-ish until you colour by arm
plot(resid(lm_lin1k)~fitted(lm_lin1k), col=as.numeric(df_run1k$arm))
plot(resid(lm_int1k)~fitted(lm_int1k), col=as.numeric(df_run1k$arm))
plot(resid(lm_prop1k)~fitted(lm_prop1k), col=as.numeric(df_run1k$arm))
plot(resid(lm_prop100)~df_run100$age, col=as.numeric(df_run100$arm))
plot(resid(lm_prop1k)~df_run1k$age, col=as.numeric(df_run1k$arm))
shiny::runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment1/R_code')
runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment1/R_code')
runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment1/R_code')
runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment1/R_code')
q()
shiny::runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment1/CT4_assignment1_dashboard')
runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment2/CT4_assignment2')
dis_level = as.factor(sample(c("Mild", "Moderate", "Severe"),
size = n_total, replace = T,
prob = c(0.5,0.3, 0.2)))
n_total = 110
dis_level = as.factor(sample(c("Mild", "Moderate", "Severe"),
size = n_total, replace = T,
prob = c(0.5,0.3, 0.2)))
summary(dis_level)
hist(rnorm(1000, mean=27.5, sd=2))
?runif
runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment2/CT4_assignment2')
data(arthritis)
library(multgee)
install.packages("multgee")
library(multgee)
data(arthritis)
?arthritis
arthritis
data("licorice_gargle") # all Likert scale outcomes, not sure about use? Preventing post-op cough type symptoms
library(medicaldata)
data("licorice_gargle")
licorice_gargle
?licorice_gargle
names(licorice_gargle)
ggplot(data=licorice_gargle, aes(x=preOp_pain, fill=preOp_gender)) +
geom_bar(col=1) +
facet_wrap(~preOp_age, nrow=1) +
theme(legend.position = "bottom")
library(ggplot2)
ggplot(data=licorice_gargle, aes(x=preOp_pain, fill=preOp_gender)) +
geom_bar(col=1) +
facet_wrap(~preOp_age, nrow=1) +
theme(legend.position = "bottom")
str(licorice_gargle)
dput(names(licorice_gargle))
unique(licorice_gargle$preOp_asa)
unique(licorice_gargle$preOp_calcBMI)
unique(licorice_gargle$preOp_mallampati)
unique(licorice_gargle$preOp_smoking)
unique(licorice_gargle$preOp_pain)
unique(licorice_gargle$intraOp_surgerySize)
unique(licorice_gargle$extubation_cough)
lic_garg = licorice_gargle[ ,1:8]
# vector of names of columns to be coerced to factor
cols <- c("preOp_gender", "preOp_asa",
"preOp_mallampati", "preOp_smoking", "preOp_pain", "treat")
lic_garg[cols] <- lapply(lic_garg[cols], factor)
# Check the result:
sapply(lic_garg, class)
str(lic_garg)
ggplot(data=lic_garg, aes(x=preOp_pain, fill=preOp_gender)) +
geom_bar(col=1) +
facet_wrap(~preOp_age, nrow=1) +
theme(legend.position = "bottom")
ggplot(data=lic_garg, aes(x=preOp_pain, fill=preOp_gender)) +
geom_bar(col=1) +
facet_wrap(~preOp_smoking, nrow=1) +
theme(legend.position = "bottom")
library(rtables)
library(tibble)
library(dplyr)
install.packages("rtables")
library(rtables)
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_gender"), afun = function(x) {
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
})
tbl2 <- build_table(lyt, ADSL)
tbl2 <- build_table(lyt, lic_garg)
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_BMI"), afun = function(x) {
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
})
tbl2 <- build_table(lyt, lic_garg)
names(lic_garg)
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_calcBMI"), afun = function(x) {
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
})
tbl2 <- build_table(lyt, lic_garg)
tbl2
?rcell
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_calcBMI"), afun = function(x) {
if(is.numeric(x)){
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
} else if (is.factor(x)){
in_rows(
"Count (prop)" = rcell(c(sum(x), count(x)), format = "xx.xx (xx.xx)")
)
}
})
tbl2 <- build_table(lyt, lic_garg)
tbl2
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_calcBMI", "preOp_gender"), afun = function(x) {
if(is.numeric(x)){
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
} else if (is.factor(x)){
in_rows(
"Count (prop)" = rcell(c(sum(x), count(x)), format = "xx.xx (xx.xx)")
)
}
})
tbl2 <- build_table(lyt, lic_garg)
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_calcBMI", "preOp_gender"), afun = function(x) {
if(is.numeric(x)){
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
} else if (is.factor(x)){
in_rows(
"Count (prop)" = rcell(c(length(x), count(x)), format = "xx.xx (xx.xx)")
)
}
})
tbl2 <- build_table(lyt, lic_garg)
lyt <- basic_table() %>%
lyt <- basic_table() %>%
)
lyt <- basic_table() %>%
dim(lic_garc)
dim(lic_garg)
37*0.0130
35*0.0130
0.03014*(5/6)
0.13*60
0.0193 * 366000
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
# for lecture notes
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials/lecture_notes")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(gridExtra)
library(knitr)
library(kableExtra)
library(mvtnorm)
knitr::opts_chunk$set(echo=FALSE, message = FALSE, warning = FALSE)
ggplot(data = df_hommel, aes(y=baseline, fill = arm)) + geom_histogram() + ylab("Baseline (mmHg)")+theme_bw()
ggplot(data = df_hommel, aes(x=baseline, fill = arm)) + geom_histogram() + ylab("Baseline (mmHg)")+theme_bw()
ggplot(data = df_hommel, aes(x=baseline, fill = arm)) + geom_density() + ylab("Baseline (mmHg)")+theme_bw()
ggplot(data = df_hommel, aes(y=baseline, fill = arm)) + geom_boxplot() + ylab("Baseline (mmHg)")+
theme_bw()
ggplot(data = df_hommel, aes(y=baseline, fill = arm)) + geom_boxplot() + ylab("Baseline (mmHg)")+
theme_bw() + scale_x_continuous(breaks=c(-0.2,0.2), labels = c("Captopril", "Placebo"))
ggplot(data = df_hommel, aes(y=baseline, fill = arm)) + geom_boxplot() + ylab("Baseline (mmHg)")+
theme_bw() + scale_x_continuous(breaks=c(-0.2,0.2), labels = c("Captopril", "Placebo")) +
theme(legend.position = "none")
?geom_boxplot
ggplot(data = df_hommel, aes(x=baseline, fill = arm)) + geom_boxplot() + ylab("Baseline (mmHg)")+
theme_bw() + scale_y_continuous(breaks=c(-0.2,0.2), labels = c("Captopril", "Placebo")) +
theme(legend.position = "none")
ggplot(data = df_hommel, aes(x=baseline, fill = arm))+ geom_boxplot() +
ylab("Group")+ xlab("Baseline blood pressure (mmHg)")
ggplot(data = df_hommel, aes(x=baseline, fill = arm))+ geom_boxplot() +
ylab("Group")+ xlab("Baseline blood pressure (mmHg)")+
theme_bw() + scale_y_continuous(breaks=c(-0.2,0.2), labels = c("Captopril", "Placebo")) +
theme(legend.position = "none")
ggplot(data = df_hommel, aes(x=baseline, fill = arm))+ geom_boxplot() +
ylab("Group")+ xlab("Baseline blood pressure (mmHg)")+
theme_bw() + scale_y_continuous(breaks=c(-0.2,0.2), labels = c("Captopril", "Placebo")) +
theme(legend.position = "none", aspect.ratio=2)
ggplot(data = df_hommel, aes(x=baseline, fill = arm))+ geom_boxplot() +
ylab("Group")+ xlab("Baseline blood pressure (mmHg)")+
theme_bw() + scale_y_continuous(breaks=c(-0.2,0.2), labels = c("Captopril", "Placebo")) +
theme(legend.position = "none", aspect.ratio=0.5)
ggplot(data = df_hommel, aes(x=baseline, fill = arm))+ geom_boxplot() +
ylab("Group")+ xlab("Baseline blood pressure (mmHg)")+
theme_bw() + scale_y_continuous(breaks=c(-0.2,0.2), labels = c("Captopril", "Placebo")) +
theme(legend.position = "none", aspect.ratio=0.4)
ggplot(data = df_hommel, aes(x=baseline, fill = arm))+ geom_boxplot() +
ylab("Group")+ xlab("Baseline blood pressure (mmHg)")+
theme_bw() + scale_y_continuous(breaks=c(-0.2,0.2), labels = c("Captopril", "Placebo")) +
theme(legend.position = "none", aspect.ratio=0.25)
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
lg_df
str(lg_df)
stratified_gender <- lg_df %>%
group_by(preOp_gender)
stratified
stratified_gender
?group_by
str(lg_df)
stratified_gendersmoking <- lg_df %>%
group_by(preOp_gender, preOp_smoking)
class(stratified_gendersmoking)
str(stratified_gendersmoking)
stratified_gendersmoking <- lg_df %>%
group_split(preOp_gender, preOp_smoking)
class(stratified_gendersmoking)
names(stratified_gendersmoking)
length(stratified_gendersmoking)
stratified_gendersmoking[[1]]
strat_gen_sm <- lg_df %>%
group_split(preOp_gender, preOp_smoking)
group_size = sapply(
1:length(strat_gen_sm),
function(i){
nrow(strat_gen_sm[[i]])
}
)
group_sizes
group_sizes = sapply(
1:length(strat_gen_sm),
function(i){
nrow(strat_gen_sm[[i]])
}
)
group_sizes
list()
reslist = list()
reslist[[1]] = "blah"
reslist[[2]] = c(0.1)
reslist
# This command creates an empty list, which we will fill with allocation data frames as we go through
alloc_list = list()
# The loop works through the stratified data frames, applies SRS to allocate patients
# and stores them in alloc_list
for (i in 1:length(strat_gen_sm)){
alloc_list[[i]] = srs(strat_gen_sm[[i]])
}
alloc_list
unlist(alloc_list)
alloc_list
apply(alloc_list, rbind)
apply(alloc_list, FUN=rbind)
?apply
lapply(alloc_list, FUN=rbind)
?bind_cols
bind.cols(alloc_list)
dplyr::bind.cols(alloc_list)
dplyr::bind_cols(alloc_list)
?bind_cols
dplyr::bind_rows(alloc_list)
# Add an ID variable so that we can keep track of the order of participants
lg_df$ID = 1:nrow(lg_df)
# split the data frame according to levels of factors
strat_gen_sm <- lg_df %>%
group_split(preOp_gender, preOp_smoking)
# This command creates an empty list, which we will fill with allocation data frames as we go through
alloc_list = list()
# The loop works through the stratified data frames, applies SRS to allocate patients
# and stores them in alloc_list
for (i in 1:length(strat_gen_sm)){
alloc_list[[i]] = srs(strat_gen_sm[[i]])
}
# bind all the data frames back together again
alloc_full= dplyr::bind_rows(alloc_list)
alloc_full[order(alloc_full$ID)]
alloc_full[order(alloc_full$ID),]
alloc_full[alloc_full$ID,]
alloc_full[order(alloc_full$ID),]
?minirand
?Minirand
ntrt <- 3
nsample <- 120
trtseq <- c(1, 2, 3)
ratio <- c(2, 2, 1)
c1 <- sample(seq(1, 0), nsample, replace = TRUE, prob = c(0.4, 0.6))
c2 <- sample(seq(1, 0), nsample, replace = TRUE, prob = c(0.3, 0.7))
c3 <- sample(c(2, 1, 0), nsample, replace = TRUE, prob = c(0.33, 0.2, 0.5))
c4 <- sample(seq(1, 0), nsample, replace = TRUE, prob = c(0.33, 0.67))
covmat <- cbind(c1, c2, c3, c4) # generate the matrix of covariate factors for the subjects
covmat
## Information about the treatment
ntrt <- 3 # There will three treatment groups
trtseq <- c(1, 2, 3) # the treatment groups are indexed 1, 2, 3
ratio <- c(2, 2, 1)  # the treatment groups will be allocated in a 2:2:1 ratio
## The next few rows generate the participant data frame
nsample <- 120 # we will have 120 participants
c1 <- sample(seq(1, 0), nsample, replace = TRUE, prob = c(0.4, 0.6))
c2 <- sample(seq(1, 0), nsample, replace = TRUE, prob = c(0.3, 0.7))
c3 <- sample(c(2, 1, 0), nsample, replace = TRUE, prob = c(0.33, 0.2, 0.5))
c4 <- sample(seq(1, 0), nsample, replace = TRUE, prob = c(0.33, 0.67))
covmat <- cbind(c1, c2, c3, c4) # generate the matrix of covariate factors for the subjects
# label of the covariates
colnames(covmat) = c("Gender", "Age", "Hypertension", "Use of Antibiotics")
covwt <- c(1/4, 1/4, 1/4, 1/4) #equal weights/importance applied to each factor
res <- rep(NA, nsample) # Generate a vector to store the results (the allocations)
# generate treatment assignment for the 1st subject
res[1] = sample(trtseq, 1, replace = TRUE, prob = ratio/sum(ratio))
# work through the remaining patients sequentially
for (j in 2:nsample)
{
# get treatment assignment sequentially for all subjects
# The vector res is updated and so all previous allocations are accounted for
# covmat is the data frame of participant data
res[j] <- Minirand(
covmat=covmat, j, covwt=covwt, ratio=ratio, ntrt=ntrt, trtseq=trtseq, method="Range", result=res, p = 0.9
)
}
## Store the allocation vector 'res' as 'trt1'
trt1 <- res
trt1
#Display the number of randomized subjects at covariate factors
balance1 <- randbalance(trt1, covmat, ntrt, trtseq)
balance1
totimbal(trt = trt1, covmat = covmat, covwt = covwt,
ratio = ratio, ntrt = ntrt, trtseq = trtseq, method = "Range")
?totimbal
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
