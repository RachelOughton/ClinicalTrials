data("licorice_gargle") # all Likert scale outcomes, not sure about use? Preventing post-op cough type symptoms
library(medicaldata)
data("licorice_gargle")
licorice_gargle
?licorice_gargle
names(licorice_gargle)
ggplot(data=licorice_gargle, aes(x=preOp_pain, fill=preOp_gender)) +
geom_bar(col=1) +
facet_wrap(~preOp_age, nrow=1) +
theme(legend.position = "bottom")
library(ggplot2)
ggplot(data=licorice_gargle, aes(x=preOp_pain, fill=preOp_gender)) +
geom_bar(col=1) +
facet_wrap(~preOp_age, nrow=1) +
theme(legend.position = "bottom")
str(licorice_gargle)
dput(names(licorice_gargle))
unique(licorice_gargle$preOp_asa)
unique(licorice_gargle$preOp_calcBMI)
unique(licorice_gargle$preOp_mallampati)
unique(licorice_gargle$preOp_smoking)
unique(licorice_gargle$preOp_pain)
unique(licorice_gargle$intraOp_surgerySize)
unique(licorice_gargle$extubation_cough)
lic_garg = licorice_gargle[ ,1:8]
# vector of names of columns to be coerced to factor
cols <- c("preOp_gender", "preOp_asa",
"preOp_mallampati", "preOp_smoking", "preOp_pain", "treat")
lic_garg[cols] <- lapply(lic_garg[cols], factor)
# Check the result:
sapply(lic_garg, class)
str(lic_garg)
ggplot(data=lic_garg, aes(x=preOp_pain, fill=preOp_gender)) +
geom_bar(col=1) +
facet_wrap(~preOp_age, nrow=1) +
theme(legend.position = "bottom")
ggplot(data=lic_garg, aes(x=preOp_pain, fill=preOp_gender)) +
geom_bar(col=1) +
facet_wrap(~preOp_smoking, nrow=1) +
theme(legend.position = "bottom")
library(rtables)
library(tibble)
library(dplyr)
install.packages("rtables")
library(rtables)
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_gender"), afun = function(x) {
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
})
tbl2 <- build_table(lyt, ADSL)
tbl2 <- build_table(lyt, lic_garg)
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_BMI"), afun = function(x) {
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
})
tbl2 <- build_table(lyt, lic_garg)
names(lic_garg)
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_calcBMI"), afun = function(x) {
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
})
tbl2 <- build_table(lyt, lic_garg)
tbl2
?rcell
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_calcBMI"), afun = function(x) {
if(is.numeric(x)){
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
} else if (is.factor(x)){
in_rows(
"Count (prop)" = rcell(c(sum(x), count(x)), format = "xx.xx (xx.xx)")
)
}
})
tbl2 <- build_table(lyt, lic_garg)
tbl2
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_calcBMI", "preOp_gender"), afun = function(x) {
if(is.numeric(x)){
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
} else if (is.factor(x)){
in_rows(
"Count (prop)" = rcell(c(sum(x), count(x)), format = "xx.xx (xx.xx)")
)
}
})
tbl2 <- build_table(lyt, lic_garg)
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_calcBMI", "preOp_gender"), afun = function(x) {
if(is.numeric(x)){
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
} else if (is.factor(x)){
in_rows(
"Count (prop)" = rcell(c(length(x), count(x)), format = "xx.xx (xx.xx)")
)
}
})
tbl2 <- build_table(lyt, lic_garg)
lyt <- basic_table() %>%
lyt <- basic_table() %>%
)
lyt <- basic_table() %>%
dim(lic_garc)
dim(lic_garg)
37*0.0130
35*0.0130
0.03014*(5/6)
0.13*60
0.0193 * 366000
data("iris")
str(iris)
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram()
library(ggplot2)
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram()
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram(position="dodge")
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram(position="dodge", bins=6)
install.packages("multigroup")
library(multigroup)
TBWvariance(iris, Species)
TBWvariance(iris, iris$Species)
?TBWvariance
iris
TBWvariance(iris[,1], iris$Species)
TBWvariance(iris["Sepal.Length"], iris$Species)
var(iris$Sepal.Length)
between.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
mean = mean(data)
ssqvec = sapply(1:ng, function(i){(means[i]-mean)^2})
ssqvec/(ng-1)
}
between.var(iris$Sepal.Length, iris$Species)
between.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
mean = mean(data)
ssqvec = sapply(1:ng, function(i){(means[i]-mean)^2})
sum(ssqvec)/(ng-1)
}
between.var(iris$Sepal.Length, iris$Species)
var(sepal.length)
var(iris$Sepal.Length
)
debug(between.var)
between.var(iris$Sepal.Length, iris$Species)
groups
ng
means
mean
ssqvec
ssqvec
0.84^2
sum(ssqvec)/3
between.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
mean = mean(data)
ssqvec = sapply(1:ng, function(i){njvec[i]*(means[i]-mean)^2})
sum(ssqvec)/(ntot-ng)
}
between.var(iris$Sepal.Length, iris$Species)
library(fivethirtyeight)
install.packages("fivethirtyeight")
library(fivethirtyeight)
data(bechdel)
?bechdel
data(mad_men)
?TBWvariance
TBWvariance
within.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
g_sums = rep(NA, ng)
for (j in 1:ng){
data_j = data[groupvec == groups[j]]
for (i in 1:njvec[j]){
ssqvec = (data_j[i] - means[j])^2
g_sums[j] = sum(ssqvec)/(njvec[i]-1)
}
}
sum(g_sums)
}
within.var(iris$Sepal.Length, iris$Species)
debug(within.var)
within.var(iris$Sepal.Length, iris$Species)
groups
ng
ntot
njvec
g_sums
within.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
g_sums = rep(NA, ng)
for (j in 1:ng){
data_j = data[groupvec == groups[j]]
ssqvec = rep(NA, njvec[j])
for (i in 1:njvec[j]){
ssqvec[i] = (data_j[i] - means[j])^2
}
g_sums[j] = sum(ssqvec)/(njvec[i]-1)
}
sum(g_sums)
}
between.var(iris$Sepal.Length, iris$Species)
within.var(iris$Sepal.Length, iris$Species)
debug(within.vRar)
debug(within.var)
within.var(iris$Sepal.Length, iris$Species)
njvec
data_j
ssqvec
g_sums
ssqvec
sum(ssqvec)
sum(ssqvec)/(njvec[i]-1)
sum(ssqvec)/(njvec[j]-1)
within.var
within.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
g_sums = rep(NA, ng)
for (j in 1:ng){
data_j = data[groupvec == groups[j]]
ssqvec = rep(NA, njvec[j])
for (i in 1:njvec[j]){
ssqvec[i] = (data_j[i] - means[j])^2
}
g_sums[j] = sum(ssqvec)/(njvec[j]-1)
}
sum(g_sums)
}
between.var(iris$Sepal.Length, iris$Species)
within.var(iris$Sepal.Length, iris$Species)
TBWvariance(iris["Sepal.Length"], iris$Species)
var(iris$Sepal.Length)
?Veteran
library(survival)
?veteran
knitr::opts_chunk$set(echo = TRUE)
km_va = survfit(Surv(time, status) ~ trt, data=veteran)
autoplot(km_va)
library(ggplot2)
?require
km_va = survfit(Surv(time, status) ~ trt, data=veteran)
autoplot(km_va)
summary(km_va)
?autoplot
km_va = survfit(Surv(time, status) ~ trt, data=veteran)
autoplot(km_va)
knitr::opts_chunk$set(echo=FALSE, message = FALSE, warning = FALSE)
htmltools::tagList(rmarkdown::html_dependency_font_awesome())
# This line sometimes needs commenting out to first generate the html file
options(knitr.table.format = function() {
if (knitr::is_latex_output())
"latex" else "pipe"
})
library(ggfortify)
autoplot(km_va)
autoplot(km_va, conf.int=F)
sr_va = survreg(Surv(time, status) ~ trt, dist='weibull', data=veteran)
autoplot(sr_va)
summary(sr_va)
str(vetera)
str(veteran)
summary(veteran$trt)
sr_va = survreg(Surv(time, status) ~ as.factor(trt), dist='weibull', data=veteran)
tpred_vaA = predict(sr_va, newdata=list(trt=1),type="quantile",p=seq(.01,.99,by=.01))
tpred_vaB = predict(sr_va, newdata=list(trt=1),type="quantile",p=seq(.01,.99,by=.01))
va_weib_df = data.frame(
time = c(tpred_vaA, tpred_vaB),
prob = c(seq(.01,.99,by=.01), seq(.01,.99,by=.01)),
trt = as.factor(c(rep(1, 99), rep(1, 99))))
plot(va_km_fit, xlab="Time", ylab = "S(t)", col=c(1,2))
plot(va_km, xlab="Time", ylab = "S(t)", col=c(1,2))
plot(km_va, xlab="Time", ylab = "S(t)", col=c(1,2))
lines(va_weib_df$time[va_weib_df$trt==1], 1-va_weib_df$prob[va_weib_df$trt==1], type="l", col=1, lty=2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggfortify)
library(survival)
autoplot(km_va, conf.int=F) + geom_line(data=va_weib_df, aes(x=time, y=1-prob, col=trt))
tpred_vaB = predict(sr_va, newdata=list(trt=2),type="quantile",p=seq(.01,.99,by=.01))
va_weib_df = data.frame(
time = c(tpred_vaA, tpred_vaB),
prob = c(seq(.01,.99,by=.01), seq(.01,.99,by=.01)),
trt = as.factor(c(rep(1, 99), rep(1, 99))))
autoplot(km_va, conf.int=F) + geom_line(data=va_weib_df, aes(x=time, y=1-prob, col=trt))
va_weib_df
tpred_vaA = predict(sr_va, newdata=list(trt=1),type="quantile",p=seq(.01,.99,by=.01))
tpred_vaB = predict(sr_va, newdata=list(trt=2),type="quantile",p=seq(.01,.99,by=.01))
va_weib_df = data.frame(
time = c(tpred_vaA, tpred_vaB),
prob = c(seq(.01,.99,by=.01), seq(.01,.99,by=.01)),
trt = as.factor(c(rep(1, 99), rep(2, 99))))
autoplot(km_va, conf.int=F) + geom_line(data=va_weib_df, aes(x=time, y=1-prob, col=trt))
coxph(formula = Surv(time, status)~as.factor(trt), data=veteran)
str(veteran)
?veteran
coxph(formula = Surv(time, status)~as.factor(trt) + celltype + age + diagtime + prior, data=veteran)
km_va2 = survfit(Surv(time, status) ~ as.factor(trt)+celltype, data=veteran)
autoplot(km_va2, conf.int=F)
km_va2 = survfit(Surv(time, status) ~ celltype, data=veteran)
autoplot(km_va2, conf.int=F)
q()
eycp_df = read.csv(
file = "/Users/rachelo/OneDrive - Durham University/AP2020_21/Projects/EEF_MPT/Randomisation/FourSettings RVM.csv", header=T)
eycp_df$ID = 1:nrow(eycp_df)
sample1 = function(){
sami = sample(eycp_df$ID, size=4, replace=F)
type_i = eycp_df$Type[sami]
mentor_i = eycp_df$Mentor[sami]
tab_type = table(type_i)
tab_mentor = table(mentor_i)
if((max(tab_type)==2)&(max(tab_mentor)==1)){
fit_i = T
} else {fit_i = F}
return(
list(
sami = sami,
max_type = max(tab_type),
max_mentor = max(tab_mentor),
fit = fit_i
)
)
}
# Check this works
sample1()
set.seed(4498)
sam_mat = matrix(NA, nrow=1000, ncol = 7)
sam_df = as.data.frame(sam_mat)
names(sam_df) = c(sprintf("S%g", 1:4), "Max_type", "Max_mentor", "Fit")
for ( i in 1:1000){
sam_i =sample1()
sam_df[i,1:4] = sam_i$sami
sam_df$Max_type[i] = sam_i$max_type
sam_df$Max_mentor[i] = sam_i$max_mentor
sam_df$Fit[i] = sam_i$fit
}
sam_fit = sam_df[sam_df$Fit,]
sample(1:nrow(sam_fit), size=1)
sam_fit[29,]
eycp_df[as.numeric(sam_fit[29,1:4]),]
library(ggplot2)
library(gridExtra)
library(rstan)
stan_cop2 =
"
data {
int<lower=1> N; // Total number of people
vector[N] G;  // vector of group variables (0 is control, 1 is treatment)
int<lower=0> YCO[N]; // Callout (1) or not (0)
int<lower=0> Yconv[N]; // Conviction (1) or not (0)
}
parameters{
real alpha_CO;
real beta_CO;
real alpha_conv;
real beta_conv;
}
transformed parameters{
vector[N] pi_conv;
for (n in 1:N){
if (YCO[n] == 1)
pi_conv[n] = inv_logit(alpha_conv + G[n] * beta_conv);
else if (YCO[n] == 0)
pi_conv[n] = 0;
}
real pi_CO_control;
pi_CO_control = exp(alpha_CO)/(1+exp(alpha_CO));
real pi_CO_treat;
pi_CO_treat = exp(alpha_CO+beta_CO)/(1+exp(alpha_CO+beta_CO));
real pi_conv_control;
pi_conv_control = exp(alpha_conv)/(1+exp(alpha_conv));
real pi_conv_treat;
pi_conv_treat = exp(alpha_conv+beta_conv)/(1+exp(alpha_conv+beta_conv));
}
// maybe I would have to make this a loop?
model{
YCO ~ bernoulli_logit(alpha_CO + beta_CO*G);
Yconv ~ bernoulli(pi_conv);
}
"
cop_gen2 = function(
N, # The number of participants in total
G, # Vector of group variables
alpha_CO, # true value of alpha for callouts
beta_CO,   # true value of beta (treatment effect) for callouts
alpha_conv, # true value of alpha for convictions
beta_conv   # true value of beta (treatment effect) for convictions
){
pi_vec_CO = exp(alpha_CO+beta_CO*G)/(1+exp(alpha_CO+beta_CO*G))
YCO = sapply(
1:N,
function(i){
sample(c(1,0), size=1, prob = c(pi_vec_CO[i], 1-pi_vec_CO[i]))
}
)
pi_vec_conv = exp(alpha_conv+beta_conv*G)/(1+exp(alpha_conv+beta_conv*G))
Yconv = sapply(
1:N,
function(i){
if(YCO[i]==1){
sample(c(1,0), size=1, prob = c(pi_vec_conv[i], 1-pi_vec_conv[i]))
} else {
0
}
}
)
list(YCO = YCO, Yconv = Yconv, G=G)
}
cg2_800_real55 = cop_gen2(N=800, G = c(rep(1,400), rep(0,400)), alpha_CO=-0.9, beta_CO=-0.5, alpha_conv=-2, beta_conv=0.5)
cop2_800_real55 = stan(
model_code = stan_cop2,
data = list(N=800, G=cg2_800_real55$G, YCO=cg2_800_real55$YCO, Yconv = cg2_800_real55$Yconv),
iter=5000
)
png(file ="images/ggpostparam800_55.png")
stan_hist(cop2_800_real55, pars = c("alpha_CO", "beta_CO", "alpha_conv", "beta_conv"))
dev.off()
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
png(file ="images/ggpostparam800_55.png")
stan_hist(cop2_800_real55, pars = c("alpha_CO", "beta_CO", "alpha_conv", "beta_conv"))
dev.off()
out_800_real55 = extract(cop2_800_real55)
pi_CO_df800_55 = data.frame(
pi_CO = c(out_800_real55$pi_CO_control, out_800_real55$pi_CO_treat),
Group = c(rep("Control", length(out_800_real55$pi_CO_control)), rep("Treatment", length(out_800_real55$pi_CO_control)))
)
ggpost_CO_55 = ggplot(data=pi_CO_df800_55, aes(x=pi_CO, col=Group)) + geom_density() +
xlab("Posterior probability of call-out") + theme_bw() + xlim(0,1) +
theme(legend.position = "bottom")
ggpost_CO_55
pi_conv_df800_55 = data.frame(
pi_conv = c(out_800_real55$pi_conv_control, out_800_real55$pi_conv_treat),
Group = c(rep("Control", length(out_800_real55$pi_conv_control)), rep("Treatment", length(out_800_real55$pi_conv_control)))
)
ggpost_conv_55 = ggplot(data=pi_conv_df800_55, aes(x=pi_conv, col=Group)) + geom_density() +
xlab("Posterior probability of conviction") + theme_bw() + xlim(0,1)+
theme(legend.position = "bottom")
ggpost_conv_55
png(file ="images/ggpost800_55.png", height=480, width=960)
grid.arrange(ggpost_CO_55, ggpost_conv_55, nrow=1)
dev.off()
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
cg2_800_real55 = cop_gen2(N=800, G = c(rep(1,400), rep(0,400)), alpha_CO=-0.9, beta_CO=-0.5, alpha_conv=-2, beta_conv=0.5)
cop2_800_real55 = stan(
model_code = stan_cop2,
data = list(N=800, G=cg2_800_real55$G, YCO=cg2_800_real55$YCO, Yconv = cg2_800_real55$Yconv),
iter=5000
)
q()
