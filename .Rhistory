# These will actually be added at the 'run trial' stage in shiny
hidden_norm = rnorm(n=n_total, mean=0, sd=1)
hidden_unif = runif(n=n_total, min=0, max=1)
hidden_cat = as.factor(sample(c("A", "B", "C"), size=n_total, replace=T))
df_part =  data.frame(ID = ID, sex=sex, age=age, baseline = baseline,
hid_norm = hidden_norm,
hid_unif = hidden_unif,
hid_cat = hidden_cat)
}
run_trial = function(
df_alloc,
coef_baseline=1,
coef_arm=-4,
coef_sex=0,
coef_armsex=0,
coef_armage=2,
coef_norm=1,
coef_unif=2,
coef_cat=1.3,
sd_err=3
){
n_tot = nrow(df_alloc)
out_temp = coef_baseline*df_alloc$baseline +
coef_arm*as.numeric(df_alloc$arm) +
coef_sex*as.numeric(df_alloc$sex) +
coef_armsex*as.numeric(df_alloc$arm)*as.numeric(df_alloc$sex)+
coef_armage*as.numeric(df_alloc$arm)*(df_alloc$age - 50)+
coef_norm*df_alloc$hid_norm +
coef_unif*df_alloc$hid_unif +
coef_cat*as.numeric(df_alloc$hid_cat) +
rnorm(n_tot, mean=0, sd=sd_err)
df_alloc$outcome = out_temp
df_alloc
}
df_part100 = gen_part(100)
df_alloc100 = df_part100
df_alloc100$arm = as.factor(sample(c("A", "B"), size = 100, replace=T))
df_run100 = run_trial(df_alloc100,
coef_baseline =1,
coef_arm=-4,
coef_sex=0,
coef_armsex=0,
coef_armage=2,
coef_norm=1,
coef_unif=2,
coef_cat=1.5,
sd_err=3)
lm_lin100 = lm(outcome ~ baseline+arm+sex+age, data=df_run100)
lm_int100 = lm(outcome ~ (baseline+arm+sex+age)*(baseline+arm+sex+age), data=df_run100)
lm_prop100 = lm(outcome ~ baseline + arm + age + arm:age, data=df_run100)
summary(lm_lin100)
summary(lm_lin1000)
summary(lm_int100)
summary(lm_prop100)
plot(resid(lm_lin100)~fitted(lm_lin100), col=as.numeric(df_run100$arm))
plot(resid(lm_int100)~fitted(lm_int100), col=as.numeric(df_run100$arm))
plot(resid(lm_prop100)~fitted(lm_prop100), col=as.numeric(df_run100$arm))
plot(resid(lm_prop100)~df_run100$age, col=as.numeric(df_run100$arm))
df_part1k = gen_part(1000)
df_alloc1k = df_part1k
df_alloc1k$arm = as.factor(sample(c("A", "B"), size = 1000, replace=T))
df_run1k = run_trial(df_alloc1k,
coef_baseline =1,
coef_arm=-4,
coef_sex=0,
coef_armsex=0,
coef_armage=2,
coef_norm=1,
coef_unif=2,
coef_cat=1.5,
sd_err=3)
lm_lin1k = lm(outcome ~ baseline+arm+sex+age, data=df_run1k)
lm_int1k = lm(outcome ~ (baseline+arm+sex+age)*(baseline+arm+sex+age), data=df_run1k)
lm_prop1k = lm(outcome ~ baseline + arm + age + arm:age, data=df_run1k)
summary(lm_lin1k)
summary(lm_int1k)
summary(lm_prop1k)
# Resid plot for linear looks OK-ish until you colour by arm
plot(resid(lm_lin1k)~fitted(lm_lin1k), col=as.numeric(df_run1k$arm))
plot(resid(lm_int1k)~fitted(lm_int1k), col=as.numeric(df_run1k$arm))
plot(resid(lm_prop1k)~fitted(lm_prop1k), col=as.numeric(df_run1k$arm))
plot(resid(lm_prop100)~df_run100$age, col=as.numeric(df_run100$arm))
plot(resid(lm_prop1k)~df_run1k$age, col=as.numeric(df_run1k$arm))
shiny::runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment1/R_code')
runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment1/R_code')
runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment1/R_code')
runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment1/R_code')
q()
shiny::runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment1/CT4_assignment1_dashboard')
runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment2/CT4_assignment2')
dis_level = as.factor(sample(c("Mild", "Moderate", "Severe"),
size = n_total, replace = T,
prob = c(0.5,0.3, 0.2)))
n_total = 110
dis_level = as.factor(sample(c("Mild", "Moderate", "Severe"),
size = n_total, replace = T,
prob = c(0.5,0.3, 0.2)))
summary(dis_level)
hist(rnorm(1000, mean=27.5, sd=2))
?runif
runApp('Library/CloudStorage/OneDrive-DurhamUniversity/AP2020_21/Teaching/2023/ClinicalTrials4H/Assignment2/CT4_assignment2')
data(arthritis)
library(multgee)
install.packages("multgee")
library(multgee)
data(arthritis)
?arthritis
arthritis
data("licorice_gargle") # all Likert scale outcomes, not sure about use? Preventing post-op cough type symptoms
library(medicaldata)
data("licorice_gargle")
licorice_gargle
?licorice_gargle
names(licorice_gargle)
ggplot(data=licorice_gargle, aes(x=preOp_pain, fill=preOp_gender)) +
geom_bar(col=1) +
facet_wrap(~preOp_age, nrow=1) +
theme(legend.position = "bottom")
library(ggplot2)
ggplot(data=licorice_gargle, aes(x=preOp_pain, fill=preOp_gender)) +
geom_bar(col=1) +
facet_wrap(~preOp_age, nrow=1) +
theme(legend.position = "bottom")
str(licorice_gargle)
dput(names(licorice_gargle))
unique(licorice_gargle$preOp_asa)
unique(licorice_gargle$preOp_calcBMI)
unique(licorice_gargle$preOp_mallampati)
unique(licorice_gargle$preOp_smoking)
unique(licorice_gargle$preOp_pain)
unique(licorice_gargle$intraOp_surgerySize)
unique(licorice_gargle$extubation_cough)
lic_garg = licorice_gargle[ ,1:8]
# vector of names of columns to be coerced to factor
cols <- c("preOp_gender", "preOp_asa",
"preOp_mallampati", "preOp_smoking", "preOp_pain", "treat")
lic_garg[cols] <- lapply(lic_garg[cols], factor)
# Check the result:
sapply(lic_garg, class)
str(lic_garg)
ggplot(data=lic_garg, aes(x=preOp_pain, fill=preOp_gender)) +
geom_bar(col=1) +
facet_wrap(~preOp_age, nrow=1) +
theme(legend.position = "bottom")
ggplot(data=lic_garg, aes(x=preOp_pain, fill=preOp_gender)) +
geom_bar(col=1) +
facet_wrap(~preOp_smoking, nrow=1) +
theme(legend.position = "bottom")
library(rtables)
library(tibble)
library(dplyr)
install.packages("rtables")
library(rtables)
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_gender"), afun = function(x) {
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
})
tbl2 <- build_table(lyt, ADSL)
tbl2 <- build_table(lyt, lic_garg)
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_BMI"), afun = function(x) {
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
})
tbl2 <- build_table(lyt, lic_garg)
names(lic_garg)
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_calcBMI"), afun = function(x) {
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
})
tbl2 <- build_table(lyt, lic_garg)
tbl2
?rcell
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_calcBMI"), afun = function(x) {
if(is.numeric(x)){
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
} else if (is.factor(x)){
in_rows(
"Count (prop)" = rcell(c(sum(x), count(x)), format = "xx.xx (xx.xx)")
)
}
})
tbl2 <- build_table(lyt, lic_garg)
tbl2
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_calcBMI", "preOp_gender"), afun = function(x) {
if(is.numeric(x)){
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
} else if (is.factor(x)){
in_rows(
"Count (prop)" = rcell(c(sum(x), count(x)), format = "xx.xx (xx.xx)")
)
}
})
tbl2 <- build_table(lyt, lic_garg)
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_calcBMI", "preOp_gender"), afun = function(x) {
if(is.numeric(x)){
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
} else if (is.factor(x)){
in_rows(
"Count (prop)" = rcell(c(length(x), count(x)), format = "xx.xx (xx.xx)")
)
}
})
tbl2 <- build_table(lyt, lic_garg)
lyt <- basic_table() %>%
lyt <- basic_table() %>%
)
lyt <- basic_table() %>%
dim(lic_garc)
dim(lic_garg)
37*0.0130
35*0.0130
0.03014*(5/6)
0.13*60
0.0193 * 366000
data("iris")
str(iris)
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram()
library(ggplot2)
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram()
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram(position="dodge")
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram(position="dodge", bins=6)
install.packages("multigroup")
library(multigroup)
TBWvariance(iris, Species)
TBWvariance(iris, iris$Species)
?TBWvariance
iris
TBWvariance(iris[,1], iris$Species)
TBWvariance(iris["Sepal.Length"], iris$Species)
var(iris$Sepal.Length)
between.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
mean = mean(data)
ssqvec = sapply(1:ng, function(i){(means[i]-mean)^2})
ssqvec/(ng-1)
}
between.var(iris$Sepal.Length, iris$Species)
between.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
mean = mean(data)
ssqvec = sapply(1:ng, function(i){(means[i]-mean)^2})
sum(ssqvec)/(ng-1)
}
between.var(iris$Sepal.Length, iris$Species)
var(sepal.length)
var(iris$Sepal.Length
)
debug(between.var)
between.var(iris$Sepal.Length, iris$Species)
groups
ng
means
mean
ssqvec
ssqvec
0.84^2
sum(ssqvec)/3
between.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
mean = mean(data)
ssqvec = sapply(1:ng, function(i){njvec[i]*(means[i]-mean)^2})
sum(ssqvec)/(ntot-ng)
}
between.var(iris$Sepal.Length, iris$Species)
library(fivethirtyeight)
install.packages("fivethirtyeight")
library(fivethirtyeight)
data(bechdel)
?bechdel
data(mad_men)
?TBWvariance
TBWvariance
within.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
g_sums = rep(NA, ng)
for (j in 1:ng){
data_j = data[groupvec == groups[j]]
for (i in 1:njvec[j]){
ssqvec = (data_j[i] - means[j])^2
g_sums[j] = sum(ssqvec)/(njvec[i]-1)
}
}
sum(g_sums)
}
within.var(iris$Sepal.Length, iris$Species)
debug(within.var)
within.var(iris$Sepal.Length, iris$Species)
groups
ng
ntot
njvec
g_sums
within.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
g_sums = rep(NA, ng)
for (j in 1:ng){
data_j = data[groupvec == groups[j]]
ssqvec = rep(NA, njvec[j])
for (i in 1:njvec[j]){
ssqvec[i] = (data_j[i] - means[j])^2
}
g_sums[j] = sum(ssqvec)/(njvec[i]-1)
}
sum(g_sums)
}
between.var(iris$Sepal.Length, iris$Species)
within.var(iris$Sepal.Length, iris$Species)
debug(within.vRar)
debug(within.var)
within.var(iris$Sepal.Length, iris$Species)
njvec
data_j
ssqvec
g_sums
ssqvec
sum(ssqvec)
sum(ssqvec)/(njvec[i]-1)
sum(ssqvec)/(njvec[j]-1)
within.var
within.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
g_sums = rep(NA, ng)
for (j in 1:ng){
data_j = data[groupvec == groups[j]]
ssqvec = rep(NA, njvec[j])
for (i in 1:njvec[j]){
ssqvec[i] = (data_j[i] - means[j])^2
}
g_sums[j] = sum(ssqvec)/(njvec[j]-1)
}
sum(g_sums)
}
between.var(iris$Sepal.Length, iris$Species)
within.var(iris$Sepal.Length, iris$Species)
TBWvariance(iris["Sepal.Length"], iris$Species)
var(iris$Sepal.Length)
?Veteran
library(survival)
?veteran
knitr::opts_chunk$set(echo = TRUE)
km_va = survfit(Surv(time, status) ~ trt, data=veteran)
autoplot(km_va)
library(ggplot2)
?require
km_va = survfit(Surv(time, status) ~ trt, data=veteran)
autoplot(km_va)
summary(km_va)
?autoplot
km_va = survfit(Surv(time, status) ~ trt, data=veteran)
autoplot(km_va)
knitr::opts_chunk$set(echo=FALSE, message = FALSE, warning = FALSE)
htmltools::tagList(rmarkdown::html_dependency_font_awesome())
# This line sometimes needs commenting out to first generate the html file
options(knitr.table.format = function() {
if (knitr::is_latex_output())
"latex" else "pipe"
})
library(ggfortify)
autoplot(km_va)
autoplot(km_va, conf.int=F)
sr_va = survreg(Surv(time, status) ~ trt, dist='weibull', data=veteran)
autoplot(sr_va)
summary(sr_va)
str(vetera)
str(veteran)
summary(veteran$trt)
sr_va = survreg(Surv(time, status) ~ as.factor(trt), dist='weibull', data=veteran)
tpred_vaA = predict(sr_va, newdata=list(trt=1),type="quantile",p=seq(.01,.99,by=.01))
tpred_vaB = predict(sr_va, newdata=list(trt=1),type="quantile",p=seq(.01,.99,by=.01))
va_weib_df = data.frame(
time = c(tpred_vaA, tpred_vaB),
prob = c(seq(.01,.99,by=.01), seq(.01,.99,by=.01)),
trt = as.factor(c(rep(1, 99), rep(1, 99))))
plot(va_km_fit, xlab="Time", ylab = "S(t)", col=c(1,2))
plot(va_km, xlab="Time", ylab = "S(t)", col=c(1,2))
plot(km_va, xlab="Time", ylab = "S(t)", col=c(1,2))
lines(va_weib_df$time[va_weib_df$trt==1], 1-va_weib_df$prob[va_weib_df$trt==1], type="l", col=1, lty=2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(ggfortify)
library(survival)
autoplot(km_va, conf.int=F) + geom_line(data=va_weib_df, aes(x=time, y=1-prob, col=trt))
tpred_vaB = predict(sr_va, newdata=list(trt=2),type="quantile",p=seq(.01,.99,by=.01))
va_weib_df = data.frame(
time = c(tpred_vaA, tpred_vaB),
prob = c(seq(.01,.99,by=.01), seq(.01,.99,by=.01)),
trt = as.factor(c(rep(1, 99), rep(1, 99))))
autoplot(km_va, conf.int=F) + geom_line(data=va_weib_df, aes(x=time, y=1-prob, col=trt))
va_weib_df
tpred_vaA = predict(sr_va, newdata=list(trt=1),type="quantile",p=seq(.01,.99,by=.01))
tpred_vaB = predict(sr_va, newdata=list(trt=2),type="quantile",p=seq(.01,.99,by=.01))
va_weib_df = data.frame(
time = c(tpred_vaA, tpred_vaB),
prob = c(seq(.01,.99,by=.01), seq(.01,.99,by=.01)),
trt = as.factor(c(rep(1, 99), rep(2, 99))))
autoplot(km_va, conf.int=F) + geom_line(data=va_weib_df, aes(x=time, y=1-prob, col=trt))
coxph(formula = Surv(time, status)~as.factor(trt), data=veteran)
str(veteran)
?veteran
coxph(formula = Surv(time, status)~as.factor(trt) + celltype + age + diagtime + prior, data=veteran)
km_va2 = survfit(Surv(time, status) ~ as.factor(trt)+celltype, data=veteran)
autoplot(km_va2, conf.int=F)
km_va2 = survfit(Surv(time, status) ~ celltype, data=veteran)
autoplot(km_va2, conf.int=F)
q()
# for lecture notes
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials/lecture_notes")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
# for lecture notes
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials/lecture_notes")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
# for lecture notes
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials/lecture_notes")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
summary(crt_df$ng)
summary(crt_df)
summary(crt_summ)
summary(lmer_eef1)
sjPlot::tab_model(lmer_eef1)
?sjPlot
?sjPlot::tab_model
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
?aml
?coxph
cox_aml = coxph(formula = Surv(time, status)~x, data=aml)
cox_aml
summary(cox_aml)
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
