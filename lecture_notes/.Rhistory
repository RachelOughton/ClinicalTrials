in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
} else if (is.factor(x)){
in_rows(
"Count (prop)" = rcell(c(sum(x), count(x)), format = "xx.xx (xx.xx)")
)
}
})
tbl2 <- build_table(lyt, lic_garg)
lyt <- basic_table() %>%
split_cols_by("treat") %>%
analyze(vars = c("preOp_age", "preOp_calcBMI", "preOp_gender"), afun = function(x) {
if(is.numeric(x)){
in_rows(
"Mean (sd)" = rcell(c(mean(x), sd(x)), format = "xx.xx (xx.xx)"),
"Range" = rcell(range(x), format = "xx.xx - xx.xx")
)
} else if (is.factor(x)){
in_rows(
"Count (prop)" = rcell(c(length(x), count(x)), format = "xx.xx (xx.xx)")
)
}
})
tbl2 <- build_table(lyt, lic_garg)
lyt <- basic_table() %>%
lyt <- basic_table() %>%
)
lyt <- basic_table() %>%
dim(lic_garc)
dim(lic_garg)
37*0.0130
35*0.0130
0.03014*(5/6)
0.13*60
0.0193 * 366000
data("iris")
str(iris)
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram()
library(ggplot2)
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram()
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram(position="dodge")
ggplot(data=iris, aes(x=Sepal.Length, fill=Species)) + geom_histogram(position="dodge", bins=6)
install.packages("multigroup")
library(multigroup)
TBWvariance(iris, Species)
TBWvariance(iris, iris$Species)
?TBWvariance
iris
TBWvariance(iris[,1], iris$Species)
TBWvariance(iris["Sepal.Length"], iris$Species)
var(iris$Sepal.Length)
between.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
mean = mean(data)
ssqvec = sapply(1:ng, function(i){(means[i]-mean)^2})
ssqvec/(ng-1)
}
between.var(iris$Sepal.Length, iris$Species)
between.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
mean = mean(data)
ssqvec = sapply(1:ng, function(i){(means[i]-mean)^2})
sum(ssqvec)/(ng-1)
}
between.var(iris$Sepal.Length, iris$Species)
var(sepal.length)
var(iris$Sepal.Length
)
debug(between.var)
between.var(iris$Sepal.Length, iris$Species)
groups
ng
means
mean
ssqvec
ssqvec
0.84^2
sum(ssqvec)/3
between.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
mean = mean(data)
ssqvec = sapply(1:ng, function(i){njvec[i]*(means[i]-mean)^2})
sum(ssqvec)/(ntot-ng)
}
between.var(iris$Sepal.Length, iris$Species)
library(fivethirtyeight)
install.packages("fivethirtyeight")
library(fivethirtyeight)
data(bechdel)
?bechdel
data(mad_men)
?TBWvariance
TBWvariance
within.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
g_sums = rep(NA, ng)
for (j in 1:ng){
data_j = data[groupvec == groups[j]]
for (i in 1:njvec[j]){
ssqvec = (data_j[i] - means[j])^2
g_sums[j] = sum(ssqvec)/(njvec[i]-1)
}
}
sum(g_sums)
}
within.var(iris$Sepal.Length, iris$Species)
debug(within.var)
within.var(iris$Sepal.Length, iris$Species)
groups
ng
ntot
njvec
g_sums
within.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
g_sums = rep(NA, ng)
for (j in 1:ng){
data_j = data[groupvec == groups[j]]
ssqvec = rep(NA, njvec[j])
for (i in 1:njvec[j]){
ssqvec[i] = (data_j[i] - means[j])^2
}
g_sums[j] = sum(ssqvec)/(njvec[i]-1)
}
sum(g_sums)
}
between.var(iris$Sepal.Length, iris$Species)
within.var(iris$Sepal.Length, iris$Species)
debug(within.vRar)
debug(within.var)
within.var(iris$Sepal.Length, iris$Species)
njvec
data_j
ssqvec
g_sums
ssqvec
sum(ssqvec)
sum(ssqvec)/(njvec[i]-1)
sum(ssqvec)/(njvec[j]-1)
within.var
within.var = function(
data,
groupvec
){
groups = levels(as.factor(groupvec))
ng = length(groups)
ntot = length(data)
means = sapply(1:ng, function(i){mean(data[groupvec == groups[i]])})
njvec = sapply(1:ng, function(i){length(data[groupvec == groups[i]])})
g_sums = rep(NA, ng)
for (j in 1:ng){
data_j = data[groupvec == groups[j]]
ssqvec = rep(NA, njvec[j])
for (i in 1:njvec[j]){
ssqvec[i] = (data_j[i] - means[j])^2
}
g_sums[j] = sum(ssqvec)/(njvec[j]-1)
}
sum(g_sums)
}
between.var(iris$Sepal.Length, iris$Species)
within.var(iris$Sepal.Length, iris$Species)
TBWvariance(iris["Sepal.Length"], iris$Species)
var(iris$Sepal.Length)
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
52+ 0.1*57.5
install.packages("Rfast")
install.packages("Rfast2")
censweibull.mle(x=ovarian$futime[ovarian$rx==1]), df = ovarian$fustat[ovarian$rx==1])
censweibull.mle(x=ovarian$futime[ovarian$rx==1]), dfi = ovarian$fustat[ovarian$rx==1])
censweibull.mle(x=ovarian$futime[ovarian$rx==1]), di = ovarian$fustat[ovarian$rx==1])
censweibull.mle(x=ovarian$futime[ovarian$rx==1], di = ovarian$fustat[ovarian$rx==1])
library(Rfast2)
censweibull.mle(x=ovarian$futime[ovarian$rx==1], di = ovarian$fustat[ovarian$rx==1])
?censweibull.mle
censweibull.mle(x=ovarian$futime[ovarian$rx==1], di = ovarian$fustat[ovarian$rx==1], tol=1e-3)
censweibull.mle(x=ovarian$futime[ovarian$rx==1], di = ovarian$fustat[ovarian$rx==1], tol=1e-1)
censweibull.mle(x=ovarian$futime[ovarian$rx==1], di = ovarian$fustat[ovarian$rx==1], tol=1e-2)
?myeloid
?censweibull.mle
censweibull.mle(x=myeloid$futime[myeloid$trt=="A"], di = myeloid$death[myeloid$trt=="A"], tol=1e-4)
censweibull.mle(x=myeloid$futime[myeloid$trt=="A"], di = myeloid$death[myeloid$trt=="A"], tol=1e-2)
install.packages("parmsurvfit")
library(parmsurvfit)
fit_data(data=myeloid[myeloid$trt=="A",], dist = "Weibull", time = "futime", censor = "death")
fit_data(data=myeloid[myeloid$trt=="A",], dist = "weibull", time = "futime", censor = "death")
names(myeloid)
str(myeloid)
fit_data(data=myeloid[myeloid$trt=="A",], dist = "lnorm", time = "futime", censor = "death")
class(myeloid[myeloid$trt=="A",])
dim(myeloid[myeloid$trt=="A",])
fit_data(data=myeloid[myeloid$trt=="A",], dist = "lnorm", time = "futime", censor = "death")
plot_surv(data=myeloid, dist = "weibull", time = "futime", censor="death", by="trt")
?fit_data
fit_data(data=myeloid, dist = "lnorm", time = "futime", censor = "death", by="trt")
fit_data(data=myeloid, dist = "weibull", time = "futime", censor = "death", by="trt")
myeloid_weibull = fit_data(data=myeloid, dist = "weibull", time = "futime", censor = "death", by="trt")
myeloid_weibull
str(ovarian)
ov_weibull = fit_data(data=ovarian, dist = "weibull", time = "futime", censor = "fustat", by="rx")
ov_weibull
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
ov_weibull[[1]]
ov_weibull
ov_weibull = fit_data(data=ovarian, dist = "weibull", time = "futime", censor = "fustat", by="rx")
ov_weibull
ov_weibull[[1]]
ov_weibull[[1]][1]
ov_weibull[[1]]$estimate$shape
ov_weibull[[1]]$estimate
ov_weibull[[1]]$estimate[1]
plot(ov_km_fit, xlab="Time", ylab = "S(t)", col=c(1,2))
tov = 1:1300
ovC_shape = ov_weibull[[1]]$estimate[1] # gamma
ovC_scale = ov_weibull[[1]]$estimate[2] # lambda
SC_ov =  exp(-ovC_scale * tov^ovC_shape)
ovT_shape = ov_weibull[[2]]$estimate[1] # gamma
ovT_scale = ov_weibull[[2]]$estimate[2] # lambda
ST_ov =  exp(-ovT_scale * tov^ovT_shape)
lines(SC_ov~tov, col=1, lty=2)
lines(ST_ov~tov, col=2, lty=2)
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
summary(myeloid)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
SC_my
SC_my =  sapply(1:length(tmy), function(i){exp(-myC_scale * tmy[i]^myC_shape)})
SC_my
myC_scale
myC_shape
?parm_fit
?fit_data
fit_data(rearrest, "weibull", time = "months", by = "personal")
names(myeloid)
# Trying survreg
my_fit <- survival::survreg(Surv(futime, death) ~ trt,
data = myeloid,
dist = "weibull"
)
summary(my_fit)
# Trying survreg
my_fitA <- survival::survreg(Surv(futime, death) ~ 1,
data = myeloid[myeloid$trt=="A",],
dist = "weibull"
)
summary(my_fitA)
scale <- tidy(my_fitA)[1, 2] %>%
rename(scale = estimate) %>%
exp() %>%
round(2)
# extract shape parameter
shape <- tidy(my_fitA)[2, 2] %>%
rename(shape = estimate) %>%
exp() %>%
.^-1 %>%
round(2)
scale
shape
my_weibull
ov_weibull
ov_weibull = fit_data(data=ovarian, dist = "weibull", time = "futime", censor = "fustat", by="rx")
ov_weibull
?veteran
vet_weibull = fit_data(data=veteran, dist = "weibull", time = "time", censor = "status", by="trt")
vet_weibull
tmy = seq(0, 10, length=100)
SC_my =  sapply(1:length(tmy), function(i){exp(-myC_scale * tmy[i]^myC_shape)})
plot(SC_my~tmy)
?myeloid
my_s = with(myeloid, Surv(futime, death))
smy  <- survreg(my_s ~ 1, dist = 'weibull', data = myeloid)
prob_my <- seq(0.01, 1, by = 0.01)
time_my  <- predict(smy, type = "quantile", se = TRUE, p = prob_my)
smy
prob_my
time_my
ggplot(data = data.frame(p     = 1 - prob_my,
time  = time_my$fit[1,],
upper = time_my$fit[1,] + 1.96 * time_my$se.fit[1,],
lower = time_my$fit[1,] - 1.96 * time_my$se.fit[1,])) +
geom_step(aes(p, time, colour = "All"), size = 1) +
geom_ribbon(aes(p, ymin = lower, ymax = upper, fill = "All"), alpha = 0.2) +
coord_flip(ylim = c(0, 1000)) +
scale_fill_discrete(name = "Strata") +
scale_color_discrete(name = "Strata") +
theme_bw() +
theme(legend.position = "top")
my_s = with(myeloid, Surv(futime, death))
smy  <- survreg(my_s ~ trt, dist = 'weibull', data = myeloid)
prob_my <- seq(0.01, 1, by = 0.01)
time_my  <- predict(smy, type = "quantile", se = TRUE, p = prob_my)
ggplot(data = data.frame(p     = 1 - prob_my,
time  = time_my$fit[1,],
upper = time_my$fit[1,] + 1.96 * time_my$se.fit[1,],
lower = time_my$fit[1,] - 1.96 * time_my$se.fit[1,])) +
geom_step(aes(p, time, colour = "All"), size = 1) +
geom_ribbon(aes(p, ymin = lower, ymax = upper, fill = "All"), alpha = 0.2) +
coord_flip(ylim = c(0, 1000)) +
scale_fill_discrete(name = "Strata") +
scale_color_discrete(name = "Strata") +
theme_bw() +
theme(legend.position = "top")
ggplot(data = data.frame(p     = 1 - prob_my,
time  = time_my$fit[1,],
upper = time_my$fit[1,] + 1.96 * time_my$se.fit[1,],
lower = time_my$fit[1,] - 1.96 * time_my$se.fit[1,])) +
geom_step(aes(p, time, colour = "All"), size = 1) +
geom_ribbon(aes(p, ymin = lower, ymax = upper, fill = "All"), alpha = 0.2) +
coord_flip(ylim = c(0, 1000)) +
scale_fill_discrete(name = "Strata") +
scale_color_discrete(name = "Strata") +
theme_bw() +
theme(legend.position = "top")
my_s = with(myeloid[myeloid$trt=="A"], Surv(futime, death))
my_s = with(myeloid[myeloid$trt=="A",], Surv(futime, death))
smy  <- survreg(my_s ~ 1, dist = 'weibull', data = myeloid)
prob_my <- seq(0.01, 1, by = 0.01)
time_my  <- predict(smy, type = "quantile", se = TRUE, p = prob_my)
ggplot(data = data.frame(p     = 1 - prob_my,
time  = time_my$fit[1,],
upper = time_my$fit[1,] + 1.96 * time_my$se.fit[1,],
lower = time_my$fit[1,] - 1.96 * time_my$se.fit[1,])) +
geom_step(aes(p, time, colour = "All"), size = 1) +
geom_ribbon(aes(p, ymin = lower, ymax = upper, fill = "All"), alpha = 0.2) +
coord_flip(ylim = c(0, 1000)) +
scale_fill_discrete(name = "Strata") +
scale_color_discrete(name = "Strata") +
theme_bw() +
theme(legend.position = "top")
my_df = data.frame(p = 1 - prob_my,
time  = time_my$fit[1,],
upper = time_my$fit[1,] + 1.96 * time_my$se.fit[1,],
lower = time_my$fit[1,] - 1.96 * time_my$se.fit[1,],
trt = "A")
my_s = with(myeloid[myeloid$trt=="A",], Surv(futime, death))
smy  <- survreg(my_s ~ 1, dist = 'weibull', data = myeloid[myeloid$trt =="A",])
prob_my <- seq(0.01, 1, by = 0.01)
time_my  <- predict(smy, type = "quantile", se = TRUE, p = prob_my)
my_dfA = data.frame(p = 1 - prob_my,
time  = time_my$fit[1,],
upper = time_my$fit[1,] + 1.96 * time_my$se.fit[1,],
lower = time_my$fit[1,] - 1.96 * time_my$se.fit[1,],
trt = "A")
my_sB = with(myeloid[myeloid$trt=="B",], Surv(futime, death))
smyB  <- survreg(my_sB ~ 1, dist = 'weibull', data = myeloid[myeloid$trt =="B",])
prob_my <- seq(0.01, 1, by = 0.01)
time_myB  <- predict(smyB, type = "quantile", se = TRUE, p = prob_my)
my_dfB = data.frame(p = 1 - prob_my,
time  = time_myB$fit[1,],
upper = time_myB$fit[1,] + 1.96 * time_myB$se.fit[1,],
lower = time_myB$fit[1,] - 1.96 * time_myB$se.fit[1,],
trt = "B")
my_df = rbind(my_dfA, my_dfB)
ggplot(data = my_df) +
geom_step(aes(p, time, colour = "trt"), size = 1) +
geom_ribbon(aes(p, ymin = lower, ymax = upper, fill = "trt"), alpha = 0.2) +
coord_flip(ylim = c(0, 1000)) +
scale_fill_discrete(name = "Strata") +
scale_color_discrete(name = "Strata") +
theme_bw() +
theme(legend.position = "top")
my_df
my_df$trt = as.factor(my_df$trt)
ggplot(data = my_df) +
geom_step(aes(p, time, colour = "trt"), size = 1) +
geom_ribbon(aes(p, ymin = lower, ymax = upper, fill = "trt"), alpha = 0.2) +
coord_flip(ylim = c(0, 1000)) +
theme_bw() +
theme(legend.position = "top")
my_s = with(myeloid[myeloid$trt=="A",], Surv(futime, death))
smy  <- survreg(my_s ~ 1, dist = 'weibull', data = myeloid[myeloid$trt =="A",])
summary(smy)
exp(-0.312)
exp(0.3263)
1/exp(0.3263)
my_s = with(myeloid, Surv(futime, death))
smy  <- survreg(my_s ~ as.factor(trt), dist = 'weibull', data = myeloid)
plot(predict(smy, newdata=list(trt="A"),type="quantile",p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01),col="red")
linear(predict(smy, newdata=list(trt = "B"), type="quantile"),p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01), col="green")
lines(predict(smy, newdata=list(trt = "B"), type="quantile"),p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01), col="green")
lines(predict(smy, newdata=list(trt = "B"), type="quantile",p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01), col="green")
plot(predict(smy, newdata=list(trt="A"),type="quantile",p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01),col="red", type="l")
lines(seq(.99,.01,by=-.01), predict(smy, newdata=list(trt = "B"), type="quantile",p=seq(.01,.99,by=.01)), col="green")
plot(predict(smy, newdata=list(trt="A"),type="quantile",p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01),col="red", type="l")
predict(smy, newdata=list(trt="A"),type="quantile",p=seq(.01,.99,by=.01))
predict(smy, newdata=list(trt=c("A", "B"),type="quantile",p=seq(.01,.99,by=.01))
)
?predict.survreg
length(tpred_myB)
tpred_myA = predict(smy, newdata=list(trt=c("A"),type="quantile",p=seq(.01,.99,by=.01)))
tpred_myB = predict(smy, newdata=list(trt=c("B"),type="quantile",p=seq(.01,.99,by=.01)))
length(tpred_myB)
names(tpred_myA)
summary(tpred_myA)
predict(smy, newdata=list(trt=c("A"),type="quantile",p=seq(.01,.99,by=.01)))
predict(smy, newdata=list(trt="A",type="quantile",p=seq(.01,.99,by=.01)))
my_s = with(myeloid, Surv(futime, death))
smy  <- survreg(my_s ~ as.factor(trt), dist = 'weibull', data = myeloid)
predict(smy, newdata=list(trt="A",type="quantile",p=seq(.01,.99,by=.01)))
my_s = with(myeloid, Surv(futime, death))
smy  <- survreg(my_s ~ as.factor(trt), dist = 'weibull', data = myeloid)
tpred_myA = predict(smy, newdata=list(trt=c("A"),type="quantile",p=seq(.01,.99,by=.01)))
tpred_myA = predict(smy, newdata=list(trt="A",type="quantile",p=seq(.01,.99,by=.01)))
predict(smy, newdata=list(trt="A"),type="quantile",p=seq(.01,.99,by=.01)),seq(.99,.01,by=-.01)
predict(smy, newdata=list(trt="A"),type="quantile",p=seq(.01,.99,by=.01))
tpredA = predict(smy, newdata=list(trt="A"),type="quantile",p=seq(.01,.99,by=.01))
tpredA
length(seq(.01,.99,by=0.01))
tpred_myA = predict(smy, newdata=list(trt="A"),type="quantile",p=seq(.01,.99,by=.01))
tpred_myB = predict(smy, newdata=list(trt="B"),type="quantile",p=seq(.01,.99,by=.01))
my_weib_df = data.frame(
time = c(tpred_myA, tpred_myB),
prob = c(seq(.01,.99,by=.01), seq(.01,.99,by=.01)),
trt = as.factor(c(rep("A", 99), rep("B", 99))))
ggplot(data=my_weib_df, aes(x=time, y=prob, col=trt)) + geom_line()
ggplot(data=my_weib_df, aes(x=time, y=1-prob, col=trt)) + geom_line() + xlim(0,2500)
fKM_my <- survfit(my_s ~ trt,data=myeloid)
fKM_my <- survfit(my_s ~ trt,data=myeloid)
fKM_my
km_myA = predict(fKM_my, newdata=list(trt="A"),type="quantile",p=seq(.01,.99,by=.01))
summary(fKM_my)
autoplot(fKM_my)
?survfit
?surgreg
?survreg
fKM_my <- survfit(my_s ~ trt,data=myeloid, se.fit=F)
autoplot(fKM_my)
fKM_my <- survfit(my_s ~ trt,data=myeloid, se = F)
autoplot(fKM_my)
fKM_my <- survfit(my_s ~ trt,data=myeloid)
autoplot(fKM_my)
plot(ov_km_fit, xlab="Time", ylab = "S(t)", col=c(1,2))
lines(time, 1-prob, data=my_weib_df)
lines(my_weib_df$time, 1-my_weib_df$prob)
plot(ov_km_fit, xlab="Time", ylab = "S(t)", col=c(1,2))
lines(my_weib_df$time, 1-my_weib_df$prob)
plot(ov_km_fit, xlab="Time", ylab = "S(t)", col=c(1,2))
plot(my_km_fit, xlab="Time", ylab = "S(t)", col=c(1,2))
lines(my_weib_df$time, 1-my_weib_df$prob)
?lines
my_weib_df
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
?ovarian
?myeloi
?myeloid
# work macbook
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
# for lecture notes
setwd("/Users/rachelo/Documents/GitRepos/clinicaltrials/lecture_notes")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
bookdown::render_book("index.Rmd", "bookdown::pdf_book")
q()
